.TH "files_org" 3 "Sat Nov 30 2013" "Version 1.0BetaR02" "eSolid - Real-Time Kernel" \" -*- nroff -*-
.ad l
.nh
.SH NAME
files_org \- Directory and file organization 
Details about directory and file organization
.SH "Intro"
.PP
The directory structure of eSolid - RT Kernel is should be easy to understand\&. Once the organization of directories and files is understood it is fairly easy to integrate eSolid - RT Kernel into application project\&.
.SS "What is a port?"
Porting is a process of adapting software to an architecture that is different from the one for which it was originally designed\&. The term is also used when software is changed to make it usable in different environments\&. Software is portable when the cost of porting it to a new platform is less than the cost of writing it from beginning\&.
.SH "Code Sections"
.PP
The kernel is divided into three sections\&. One section is port independent code, the second one is port dependent code and the third sections is code templates\&.
.SS "Port independent code"
Port independent code is the code which does not change from port to port, e\&.g\&. when the CPU is changed this code is not changed at all and it is still correctly executed\&. Code can be developed and tested on another machine, which greatly reduces design efforts\&. It provides API and some common data structures\&. Port independent code lives under \fC/inc\fP and \fC/src\fP directories:
.IP "\(bu" 2
\fC\fBinc/kernel/kernel\&.h\fP\fP
.IP "\(bu" 2
\fCinc/kernel/kernel_cfg\&.h\fP (application specific - see template)
.IP "\(bu" 2
\fC\fBsrc/kernel\&.c\fP\fP
.IP "\(bu" 2
\fCinc/kernel/dbg\&.h\fP
.IP "\(bu" 2
\fCinc/kernel/dbg_cfg\&.h\fP (application specific - see template)
.IP "\(bu" 2
\fCsrc/dbg\&.c\fP
.PP
.PP
Click on file name for further description of the file\&.
.SS "Port dependent code"
Second section is the port dependent code\&. This code provides low-level functions which are needed to interact with interrupt controllers, manipulate CPU settings and do the context switching\&. They are highly CPU/compiler bounded and are often written in assembly language\&.
.PP
Each port has it's name which is also the name of directory which holds all the port files\&. Usually each port has some kind of variant/architecture\&. In that case each variant is a subdirectory of the containing port\&. Common code for all variants will be in common subdirectory\&. Each eSolid - RT Kernel port will have at least the following files:
.IP "\(bu" 2
\fCport/[port_name]/common/arch/compiler\&.h\fP
.IP "\(bu" 2
\fCport/[port_name]/[architecture_name]/arch/cpu_cfg\&.h\fP
.IP "\(bu" 2
\fCport/[port_name]/[architecture_name]/arch/cpu\&.h\fP
.IP "\(bu" 2
\fCport/[port_name]/[architecture_name]/cpu\&.c\fP
.IP "\(bu" 2
\fCport/[port_name]/[family_name]/family/profile\&.h\fP
.PP
.PP
\fBNote:\fP
.RS 4
Port dependent code is separately described in documentation for relevant port\&. 
.RE
.PP
.SS "Template and example code"
Templates are some predefined configuration settings for various scenarios where eSolid - RT Kernel can be used\&. Templates also contain some example code for how to write new ports\&.
.PP
In the example below is given \fCGeneric\fP template which holds files with default configuration settings and some example code for new ports\&. New port files are in template/generic/port directory\&. When porting to a new architecture/compiler use provided template files for starters\&. This will greatly reduce the time needed to become familiar with the kernel port requirements\&. Generic template files are the following:
.IP "\(bu" 2
\fC\fBtemplate/generic/_port_/common/arch/compiler\&.h\fP\fP
.IP "\(bu" 2
\fCtemplate/generic/_port_/_cpu_/arch/cpu_cfg\&.h\fP
.IP "\(bu" 2
\fCtemplate/generic/_port_/_cpu_/arch/cpu\&.h\fP
.IP "\(bu" 2
\fCtemplate/generic/_port_/_cpu_/cpu\&.c\fP
.IP "\(bu" 2
\fC\fBtemplate/generic/_port_/_mcu_/family/profile\&.h\fP\fP
.IP "\(bu" 2
\fC\fBtemplate/generic/kernel_cfg\&.h\fP\fP
.IP "\(bu" 2
\fCtemplate/generic/dbg_cfg\&.h\fP 
.PP

