.TH "critical_section" 3 "Tue Oct 29 2013" "Version 1.0BetaR01" "eSolid - Real-Time Kernel" \" -*- nroff -*-
.ad l
.nh
.SH NAME
critical_section \- Critical sections 
How to deal with critical sections in an application
.PP

.br

.br

.br
.SH "Intro"
.PP
In concurrent programming, a critical section is a piece of code that accesses a shared resource (data structure or device) that must not be concurrently accessed by more than one thread of execution\&. A critical section will usually terminate in fixed time, and a thread will have to wait for a fixed time to enter it (aka bounded waiting)\&. Some synchronization mechanism is required at the entry and exit of the critical section to ensure exclusive use, for example a semaphore\&.
.SS "eSolid RT Kernel internal critical sections"
In contrast to application code in kernel code there is no other mechanism to protect critical code except disabling interrupts\&. Fortunately, some ports have ability to mask certain interrupts with low priority and allow interrupts with higher priority\&. By masking low priority interrupts the kernel can protect its critical sections\&. However for this scheme to work its forbidden to call any OS service function from a high priority interrupt\&. If this rule is not followed then the high priority interrupt with an OS service function call can preempt the kernel low priority interrupt which will in that case corrupt the kernel internal data structures\&.
.PP
\fBNote:\fP
.RS 4
1) It is forbidden to call any OS service function from an interrupt with the priority higher than the kernel interrupt priority\&. 
.PP
2) On some ports the kernel never completely disables interrupts\&.
.RE
.PP
.SH "Implementation"
.PP
There are multiple ways how are critical sections implemented:
.IP "\(bu" 2
The simplest method is to prevent interrupts on entry into the critical section, and restoring interrupts to their previous state on exit from critical section\&. Any thread of execution entering any critical section anywhere in the system, with this implementation, will prevent any other thread, including an interrupt, from being executed on the CPU\&.
.IP "\(bu" 2
This approach can be improved upon by using semaphores\&. To enter a critical section, a thread must obtain a semaphore, which it releases on leaving the section\&. Other threads are prevented from entering the critical section at the same time as the original thread, but are free to gain control of the CPU and execute other code, including other critical sections that are protected by different semaphores\&.
.PP
.SS "Disabling interrupts"
In order to properly disable interrupts the application must follow these steps:
.IP "\(bu" 2
declare an \fCauto\fP variable which will hold interrupt state
.IP "\(bu" 2
save interrupt status into \fCauto\fP variable and disable interrupts
.IP "\(bu" 2
access the shared resource
.IP "\(bu" 2
restore previously saved interrupt state
.PP
.PP
For \fCauto\fP variable declaration macro \fBES_CRITICAL_DECL()\fP is used\&. This macro will declare a temporary interrupt status variable\&. Then by using the macro \fBES_CRITICAL_ENTER()\fP the state of enabled interrupts will be saved in \fCauto\fP variable declared earlier\&. Immediately after saving the interrupt state the macro will lock interrupts\&. Now the code can safely access and use the shared resource\&. When code finishes using the resource it will call \fBES_CRITICAL_EXIT()\fP macro\&. This macro will restore interrupts from the previously saved interrupt state\&.
.PP
.PP
.nf
ES_CRITICAL_DECL();                 /* Declare an interrupt status variable */
    :
    :
    :   
ES_CRITICAL_ENTER();                /* Save state and lock interrupts */
/*
 * Access the shared resource
 */
ES_CRITICAL_EXIT();                 /* Restore previous state unlocking the interrupts */
.fi
.PP
 
.PP
\fBWhen to use this scheme\fP
.RS 4

.IP "\(bu" 2
If interrupt service routine \fIchanges\fP the shared resource state\&.
.IP "\(bu" 2
If the processing time of critical section is very small\&.
.PP
.RE
.PP
\fBWhen not to use this scheme\fP
.RS 4

.IP "\(bu" 2
If interrupt service routine takes a lot of CPU time to process critical section\&. If a critical section is long, then the system clock will drift every time a critical section is executed because the system timer interrupt is no longer serviced, so tracking time is impossible during the critical section\&. Also, if a program execution halts during its critical section, control will never be returned to another thread, effectively halting the entire system\&.
.PP
.RE
.PP
.SS "Disabling Kernel scheduler"
Another way to implement a critical section and protect your data is by locking the kernel scheduler\&. The kernel locking can be used only if you know that protected data will be modified only by other threads\&. This protection scheme can not be used when data is modified by interrupt service routines\&.
.PP
.PP
.nf
esKernLockEnter();                  /* Temporarily disable kernel scheduler  */
/*
 * Access the shared resource
 */
esKernLockExit();                   /* Enable kernel scheduler */
.fi
.PP
 
.PP
\fBWhen to use this scheme\fP
.RS 4

.IP "\(bu" 2
If interrupt service routine \fInever changes\fP the shared resource state\&.
.IP "\(bu" 2
If the processing time of critical section is very small\&.
.PP
.RE
.PP
\fBWhen not to use this scheme\fP
.RS 4

.IP "\(bu" 2
If interrupt service routine takes a lot of CPU time to process critical section\&. If a critical section is long, then the system will be partially responsive to other events since interrupt service routines can be invoked, but note that any further processing by other threads is still disabled\&.
.PP
.RE
.PP
.SS "Using semaphores"

