.TH "Kernel lock" 3 "Sat Nov 30 2013" "Version 1.0BetaR02" "eSolid - Real-Time Kernel" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Kernel lock \- 
.PP
Kernel lock management\&.  

.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef portReg_T \fBesLockCtx_T\fP"
.br
.RI "\fIKernel lock context type\&. \fP"
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBesKernLockIntEnter\fP (\fBesLockCtx_T\fP *lockCtx)"
.br
.RI "\fIEnter a critical code lock\&. \fP"
.ti -1c
.RI "void \fBesKernLockIntExit\fP (\fBesLockCtx_T\fP lockCtx)"
.br
.RI "\fIExit a critical code lock\&. \fP"
.ti -1c
.RI "void \fBesKernLockEnterI\fP (void)"
.br
.RI "\fILock the scheduler\&. \fP"
.ti -1c
.RI "void \fBesKernLockExitI\fP (void)"
.br
.RI "\fIUnlock the scheduler\&. \fP"
.ti -1c
.RI "void \fBesKernLockEnter\fP (void)"
.br
.RI "\fILock the scheduler\&. \fP"
.ti -1c
.RI "void \fBesKernLockExit\fP (void)"
.br
.RI "\fIUnlock the scheduler\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Kernel lock management\&. 

These methods provide the most basic mechanism to protect concurrent access to a shared resource\&.
.PP
For more details see \fBCritical sections\fP\&. 
.SH "Typedef Documentation"
.PP 
.SS "typedef portReg_T \fBesLockCtx_T\fP"

.PP
Kernel lock context type\&. Variables declared using this type can hold current lock context which can be restored after a critical code section is exited\&. 
.SH "Function Documentation"
.PP 
.SS "void esKernLockIntEnter (\fBesLockCtx_T\fP *lockCtx)"

.PP
Enter a critical code lock\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlockCtx\fP Pointer to context variable where to store the current lock context\&. 
.RE
.PP
\fBThis service can be called from:\fP
.RS 4

.IP "\(bu" 2
Application initialization code
.IP "\(bu" 2
Application thread code 
.PP
.RE
.PP
\fBRescheduling:\fP
.RS 4

.IP "\(bu" 2
never 
.PP
.RE
.PP
\fBObject class:\fP
.RS 4
Regular \fBAPI\fP object, this object is part of the application programming interface\&. 
.RE
.PP

.SS "void esKernLockIntExit (\fBesLockCtx_T\fPlockCtx)"

.PP
Exit a critical code lock\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlockCtx\fP Context variable value
.RE
.PP
Restores the lock context to state before the \fBesKernLockIntEnter()\fP was called\&. 
.PP
\fBThis service can be called from:\fP
.RS 4

.IP "\(bu" 2
Application initialization code
.IP "\(bu" 2
Application thread code 
.PP
.RE
.PP
\fBRescheduling:\fP
.RS 4

.IP "\(bu" 2
possible 
.PP
.RE
.PP
\fBObject class:\fP
.RS 4
Regular \fBAPI\fP object, this object is part of the application programming interface\&. 
.RE
.PP

.SS "void esKernLockEnterI (void)"

.PP
Lock the scheduler\&. 
.PP
\fBPrecondition:\fP
.RS 4
1) \fCThe kernel state < ES_KERN_INIT\fP, see \fBKernel states\fP\&. 
.RE
.PP
\fBThis service can be called from:\fP
.RS 4

.IP "\(bu" 2
Application thread code 
.PP
.RE
.PP
\fBRescheduling:\fP
.RS 4

.IP "\(bu" 2
never 
.PP
.RE
.PP
\fBFunction class:\fP
.RS 4
\fBI class\fP, Interrupt-lock API function, this function can be called only from interrupts locked code sections\&. 
.RE
.PP

.SS "void esKernLockExitI (void)"

.PP
Unlock the scheduler\&. 
.PP
\fBPrecondition:\fP
.RS 4
1) \fCThe kernel state < ES_KERN_INIT\fP, see \fBKernel states\fP\&. 
.PP
2) \fCgKernLockCnt > 0u\fP, current number of locks must be greater than zero, in other words: each call to kernel lock function must have its matching call to kernel unlock function\&. 
.RE
.PP
\fBThis service can be called from:\fP
.RS 4

.IP "\(bu" 2
Application thread code 
.PP
.RE
.PP
\fBRescheduling:\fP
.RS 4

.IP "\(bu" 2
possible 
.PP
.RE
.PP
\fBFunction class:\fP
.RS 4
\fBI class\fP, Interrupt-lock API function, this function can be called only from interrupts locked code sections\&. 
.RE
.PP

.SS "void esKernLockEnter (void)"

.PP
Lock the scheduler\&. 
.PP
\fBPrecondition:\fP
.RS 4
1) \fCThe kernel state < ES_KERN_INIT\fP, see \fBKernel states\fP\&. 
.RE
.PP
\fBThis service can be called from:\fP
.RS 4

.IP "\(bu" 2
Application thread code 
.PP
.RE
.PP
\fBRescheduling:\fP
.RS 4

.IP "\(bu" 2
never 
.PP
.RE
.PP
\fBObject class:\fP
.RS 4
Regular \fBAPI\fP object, this object is part of the application programming interface\&. 
.RE
.PP

.SS "void esKernLockExit (void)"

.PP
Unlock the scheduler\&. 
.PP
\fBPrecondition:\fP
.RS 4
1) \fCThe kernel state < ES_KERN_INIT\fP, see \fBKernel states\fP\&. 
.PP
2) \fCgKernLockCnt > 0u\fP, current number of locks must be greater than zero, in other words: each call to kernel lock function must have its matching call to kernel unlock function\&. 
.RE
.PP
\fBThis service can be called from:\fP
.RS 4

.IP "\(bu" 2
Application thread code 
.PP
.RE
.PP
\fBRescheduling:\fP
.RS 4

.IP "\(bu" 2
possible 
.PP
.RE
.PP
\fBObject class:\fP
.RS 4
Regular \fBAPI\fP object, this object is part of the application programming interface\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for eSolid - Real-Time Kernel from the source code\&.
