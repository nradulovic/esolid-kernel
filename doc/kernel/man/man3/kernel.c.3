.TH "kernel.c" 3 "Tue Oct 29 2013" "Version 1.0BetaR01" "eSolid - Real-Time Kernel" \" -*- nroff -*-
.ad l
.nh
.SH NAME
kernel.c \- 
.PP
Implementation of port independent code\&.  

.SH SYNOPSIS
.br
.PP
\fC#include 'kernel\&.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBsysTmr\fP"
.br
.RI "\fIMain System Timer structure\&. \fP"
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBPRIO_BM_DATA_WIDTH_LOG2\fP"
.br
.RI "\fIPriority Bit Map log base 2: \fClog2(PORT_DEF_DATA_WIDTH)\fP \fP"
.ti -1c
.RI "#define \fBSCHED_STATE_INTSRV_MSK\fP   (1u << 0)"
.br
.RI "\fIKernel state variable bit position which defines if the kernel is in interrupt servicing state\&. \fP"
.ti -1c
.RI "#define \fBSCHED_STATE_LOCK_MSK\fP   (1u << 1)"
.br
.RI "\fIKernel state variable bit position which defines if the kernel is locked or not\&. \fP"
.ti -1c
.RI "#define \fBPORT_DEF_SYSTMR_ONE_TICK\fP   (\fBCFG_SYSTMR_CLOCK_FREQUENCY\fP / \fBCFG_SYSTMR_EVENT_FREQUENCY\fP)"
.br
.RI "\fISystem timer one tick value\&. \fP"
.ti -1c
.RI "#define \fBTHD_CONTRACT_SIGNATURE\fP   ((\fBportReg_T\fP)0xFEEDBEEFUL)"
.br
.RI "\fIThread structure signature\&. \fP"
.ti -1c
.RI "#define \fBTHDQ_CONTRACT_SIGNATURE\fP   ((\fBportReg_T\fP)0xFEEDBEEEUL)"
.br
.RI "\fIThread Queue structure signature\&. \fP"
.ti -1c
.RI "#define \fBVTMR_CONTRACT_SIGNATURE\fP   ((\fBportReg_T\fP)0xFEEDBCCCUL)"
.br
.RI "\fITimer structure signature\&. \fP"
.ti -1c
.RI "#define \fBDLIST_IS_ENTRY_FIRST\fP(list, entry)   ((entry) == (entry)->list\&.next)"
.br
.RI "\fIDList macro: is the thread the first one in the list\&. \fP"
.ti -1c
.RI "#define \fBDLIST_IS_ENTRY_LAST\fP(list, entry)   \fBDLIST_IS_ENTRY_FIRST\fP(list, entry)"
.br
.RI "\fIDList macro: is the thread the last one in the list\&. \fP"
.ti -1c
.RI "#define \fBDLIST_IS_ENTRY_SINGLE\fP(list, entry)   \fBDLIST_IS_ENTRY_FIRST\fP(list, entry)"
.br
.RI "\fIDList macro: is the thread single in the list\&. \fP"
.ti -1c
.RI "#define \fBDLIST_ENTRY_NEXT\fP(list, entry)   (entry)->list\&.next"
.br
.RI "\fIDList macro: get the next entry\&. \fP"
.ti -1c
.RI "#define \fBDLIST_ENTRY_INIT\fP(list, entry)"
.br
.RI "\fIDList macro: initialize entry\&. \fP"
.ti -1c
.RI "#define \fBDLIST_ENTRY_ADD_AFTER\fP(list, current, entry)"
.br
.RI "\fIDList macro: add new \fCentry\fP after \fCcurrent\fP entry\&. \fP"
.ti -1c
.RI "#define \fBDLIST_ENTRY_RM\fP(list, entry)"
.br
.RI "\fIDList macro: remove the \fCentry\fP from a list\&. \fP"
.ti -1c
.RI "#define \fBPORT_SYSTMR_WAKEUP_TH_VAL\fP   600U"
.br
.in -1c
.SS "Typedefs"

.PP
.RI "\fBThreads Queue\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "typedef struct thdLSentinel \fBthdLSentinel_T\fP"
.br
.RI "\fIThread list sentinel type\&. \fP"
.in -1c
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBDECL_MODULE_INFO\fP ('Kernel','eSolid RT Kernel','Nenad Radulovic')"
.br
.ti -1c
.RI "void \fBesKernInit\fP (void)"
.br
.RI "\fIInitialize kernel internal data structures\&. \fP"
.ti -1c
.RI "PORT_C_NORETURN void \fBesKernStart\fP (void)"
.br
.RI "\fIStart the multi-threading\&. \fP"
.ti -1c
.RI "void \fBesKernSysTmr\fP (void)"
.br
.RI "\fIProcess the system timer event\&. \fP"
.ti -1c
.RI "void \fBesKernIsrPrologueI\fP (void)"
.br
.RI "\fIEnter Interrupt Service Routine\&. \fP"
.ti -1c
.RI "void \fBesKernIsrEpilogueI\fP (void)"
.br
.RI "\fIExit Interrupt Service Routine\&. \fP"
.ti -1c
.RI "void \fBesThdInit\fP (\fBesThd_T\fP *thd, void(*fn)(void *), void *arg, \fBportStck_T\fP *stck, size_t stckSize, uint8_t prio)"
.br
.RI "\fIInitialize the specified thread\&. \fP"
.ti -1c
.RI "void \fBesThdTerm\fP (\fBesThd_T\fP *thd)"
.br
.RI "\fITerminate the specified thread\&. \fP"
.ti -1c
.RI "void \fBesThdSetPrioI\fP (\fBesThd_T\fP *thd, uint8_t prio)"
.br
.RI "\fISet the priority of a thread\&. \fP"
.ti -1c
.RI "void \fBesThdPostI\fP (\fBesThd_T\fP *thd)"
.br
.RI "\fIPost to thread semaphore\&. \fP"
.ti -1c
.RI "void \fBesThdPost\fP (\fBesThd_T\fP *thd)"
.br
.RI "\fIPost to thread semaphore\&. \fP"
.ti -1c
.RI "void \fBesThdWaitI\fP (void)"
.br
.RI "\fIWait for thread semaphore\&. \fP"
.ti -1c
.RI "void \fBesThdWait\fP (void)"
.br
.RI "\fIWait for thread semaphore\&. \fP"
.ti -1c
.RI "void \fBesThdQInit\fP (\fBesThdQ_T\fP *thdQ)"
.br
.RI "\fIInitialize Thread Queue\&. \fP"
.ti -1c
.RI "void \fBesThdQTerm\fP (\fBesThdQ_T\fP *thdQ)"
.br
.RI "\fITerminate Thread Queue\&. \fP"
.ti -1c
.RI "void \fBesThdQAddI\fP (\fBesThdQ_T\fP *thdQ, \fBesThd_T\fP *thd)"
.br
.RI "\fIAdd a thread to the Thread Queue\&. \fP"
.ti -1c
.RI "void \fBesThdQRmI\fP (\fBesThdQ_T\fP *thdQ, \fBesThd_T\fP *thd)"
.br
.RI "\fIRemoves the thread from the Thread Queue\&. \fP"
.ti -1c
.RI "\fBesThd_T\fP * \fBesThdQFetchI\fP (const \fBesThdQ_T\fP *thdQ)"
.br
.RI "\fIFetch the first high priority thread from the Thread Queue\&. \fP"
.ti -1c
.RI "\fBesThd_T\fP * \fBesThdQFetchRotateI\fP (\fBesThdQ_T\fP *thdQ, uint_fast8_t prio)"
.br
.RI "\fIFetch the next thread and rotate thread linked list\&. \fP"
.ti -1c
.RI "\fBbool_T\fP \fBesThdQIsEmpty\fP (const \fBesThdQ_T\fP *thdQ)"
.br
.RI "\fIIs thread queue empty\&. \fP"
.ti -1c
.RI "void \fBesSchedRdyAddI\fP (\fBesThd_T\fP *thd)"
.br
.RI "\fIAdd thread \fCthd\fP to the ready thread list and notify the scheduler\&. \fP"
.ti -1c
.RI "void \fBesSchedRdyRmI\fP (\fBesThd_T\fP *thd)"
.br
.RI "\fIRemove thread \fCthd\fP from the ready thread list and notify the scheduler\&. \fP"
.ti -1c
.RI "void \fBesSchedYieldI\fP (void)"
.br
.RI "\fIForce the scheduler invocation which will evaluate all ready threads and switch to ready thread with the highest priority\&. \fP"
.ti -1c
.RI "void \fBesSchedYieldIsrI\fP (void)"
.br
.RI "\fIForce the scheduler invocation which will evaluate all ready threads and switch to ready thread with the highest priority\&. \fP"
.ti -1c
.RI "void \fBesSchedLockEnterI\fP (void)"
.br
.RI "\fILock the scheduler\&. \fP"
.ti -1c
.RI "void \fBesSchedLockExitI\fP (void)"
.br
.RI "\fIUnlock the scheduler\&. \fP"
.ti -1c
.RI "void \fBesSchedLockEnter\fP (void)"
.br
.RI "\fILock the scheduler\&. \fP"
.ti -1c
.RI "void \fBesSchedLockExit\fP (void)"
.br
.RI "\fIUnlock the scheduler\&. \fP"
.ti -1c
.RI "void \fBesVTmrInitI\fP (\fBesVTmr_T\fP *vTmr, \fBesTick_T\fP tick, void(*fn)(void *), void *arg)"
.br
.RI "\fIAdd and start a new virtual timer\&. \fP"
.ti -1c
.RI "void \fBesVTmrInit\fP (\fBesVTmr_T\fP *vTmr, \fBesTick_T\fP tick, void(*fn)(void *), void *arg)"
.br
.RI "\fIAdd and start a new virtual timer\&. \fP"
.ti -1c
.RI "void \fBesVTmrTermI\fP (\fBesVTmr_T\fP *vTmr)"
.br
.RI "\fICancel and remove a virtual timer\&. \fP"
.ti -1c
.RI "void \fBesVTmrTerm\fP (\fBesVTmr_T\fP *vTmr)"
.br
.RI "\fICancel and remove a virtual timer\&. \fP"
.ti -1c
.RI "void \fBesVTmrDelay\fP (\fBesTick_T\fP tick)"
.br
.RI "\fIDelay for specified amount of ticks\&. \fP"
.ti -1c
.RI "\fBesTick_T\fP \fBesSysTmrTickGet\fP (void)"
.br
.in -1c
.PP
.RI "\fBVirtual Timer and Virtual Timer kernel thread\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "static \fBPORT_C_INLINE\fP void \fBvTmrSleep\fP (\fBesTick_T\fP ticks)"
.br
.RI "\fISet up system timer for different tick period during sleeping\&. \fP"
.ti -1c
.RI "static \fBPORT_C_INLINE\fP void \fBvTmrEvaluateI\fP (void)"
.br
.RI "\fIEvaluate armed virtual timers\&. \fP"
.ti -1c
.RI "static void \fBvTmrAddArmedS\fP (\fBesVTmr_T\fP *vTmr)"
.br
.RI "\fIAdd a virtual timer into sorted list\&. \fP"
.ti -1c
.RI "static \fBPORT_C_INLINE\fP void \fBvTmrImportPendSleepI\fP (void)"
.br
.RI "\fIImport timers from pending list to armed list\&. \fP"
.ti -1c
.RI "static void \fBvTmrImportPend\fP (void)"
.br
.RI "\fIImport timers from pending list to armed list\&. \fP"
.ti -1c
.RI "static void \fBkVTmrInit\fP (void)"
.br
.RI "\fIInitialization of Virtual Timer kernel thread\&. \fP"
.ti -1c
.RI "static void \fBkVTmr\fP (void *arg)"
.br
.RI "\fIVirtual Timer thread code\&. \fP"
.in -1c
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "static uint_fast8_t \fBgKernLockCnt\fP"
.br
.RI "\fIKernel Lock Counter\&. \fP"
.ti -1c
.RI "const volatile \fBesKernCtrl_T\fP \fBgKernCtrl\fP"
.br
.RI "\fIKernel control initialization\&. \fP"
.in -1c
.SS "System timer"

.in +1c
.ti -1c
.RI "typedef struct \fBsysTmr\fP \fBsysTmr_T\fP"
.br
.RI "\fISystem Timer type\&. \fP"
.ti -1c
.RI "static \fBsysTmr_T\fP \fBgSysTmr\fP"
.br
.RI "\fIMain System Timer structure\&. \fP"
.ti -1c
.RI "static \fBesVTmr_T\fP \fBgVTmrArmed\fP"
.br
.RI "\fIList of virtual timers to armed expire\&. \fP"
.ti -1c
.RI "static \fBesVTmr_T\fP \fBgVTmrPend\fP"
.br
.RI "\fIVirtual timers pending to be inserted into waiting list\&. \fP"
.ti -1c
.RI "static \fBesThd_T\fP \fBgKVTmr\fP"
.br
.RI "\fIVirtual timer thread ID\&. \fP"
.ti -1c
.RI "static \fBPORT_C_INLINE\fP void \fBsysTmrInit\fP (void)"
.br
.RI "\fIInitialize system timer hardware\&. \fP"
.ti -1c
.RI "static \fBPORT_C_INLINE\fP void \fBsysTmrActivate\fP (void)"
.br
.RI "\fITry to activate system timer\&. \fP"
.ti -1c
.RI "static \fBPORT_C_INLINE\fP void \fBsysTmrDeactivateI\fP (void)"
.br
.RI "\fITry to deactivate system timer\&. \fP"
.in -1c
.SS "Priority Bit Map"

.in +1c
.ti -1c
.RI "typedef struct prioBM \fBprioBM_T\fP"
.br
.RI "\fIPriority Bit Map type\&. \fP"
.ti -1c
.RI "static \fBPORT_C_INLINE\fP void \fBprioBMInit\fP (\fBprioBM_T\fP *bm)"
.br
.RI "\fIInitialize bitmap\&. \fP"
.ti -1c
.RI "static \fBPORT_C_INLINE\fP void \fBprioBMSet\fP (\fBprioBM_T\fP *bm, uint_fast8_t prio)"
.br
.RI "\fISet the bit corresponding to the prio argument\&. \fP"
.ti -1c
.RI "static \fBPORT_C_INLINE\fP void \fBprioBMClear\fP (\fBprioBM_T\fP *bm, uint_fast8_t prio)"
.br
.RI "\fIClear the bit corresponding to the prio argument\&. \fP"
.ti -1c
.RI "static \fBPORT_C_INLINE\fP uint_fast8_t \fBprioBMGet\fP (const \fBprioBM_T\fP *bm)"
.br
.RI "\fIGet the highest priority set\&. \fP"
.ti -1c
.RI "static \fBPORT_C_INLINE\fP \fBbool_T\fP \fBprioBMIsEmpty\fP (const \fBprioBM_T\fP *bm)"
.br
.RI "\fIIs bit map empty? \fP"
.in -1c
.SS "Scheduler"

.in +1c
.ti -1c
.RI "static \fBesThdQ_T\fP \fBgRdyQueue\fP"
.br
.RI "\fIReady Thread queue\&. \fP"
.ti -1c
.RI "static \fBPORT_C_INLINE\fP void \fBschedInit\fP (void)"
.br
.RI "\fIInitialize Ready Thread Queue structure \fBgRdyQueue\fP and Kernel control structure \fBesKernCtrl\fP\&. \fP"
.ti -1c
.RI "static \fBPORT_C_INLINE\fP void \fBschedStart\fP (void)"
.br
.RI "\fISet the scheduler data structures for multi-threading\&. \fP"
.ti -1c
.RI "static \fBPORT_C_INLINE\fP void \fBschedSleep\fP (void)"
.br
.RI "\fISet the scheduler to sleep\&. \fP"
.ti -1c
.RI "static \fBPORT_C_INLINE\fP void \fBschedWakeUpI\fP (void)"
.br
.RI "\fIWake up the scheduler\&. \fP"
.ti -1c
.RI "static \fBPORT_C_INLINE\fP void \fBschedRdyAddInitI\fP (\fBesThd_T\fP *thd)"
.br
.RI "\fIInitialize scheduler ready structure during the thread add operation\&. \fP"
.ti -1c
.RI "static \fBPORT_C_INLINE\fP void \fBschedQmNextI\fP (void)"
.br
.RI "\fIFetch and try to schedule the next thread of the same priority as the current thread\&. \fP"
.ti -1c
.RI "static \fBPORT_C_INLINE\fP void \fBschedQmI\fP (void)"
.br
.RI "\fIDo the Quantum (Round-Robin) scheduling\&. \fP"
.in -1c
.SS "Idle kernel thread"

.in +1c
.ti -1c
.RI "static \fBesThd_T\fP \fBgKIdle\fP"
.br
.RI "\fIIdle thread ID\&. \fP"
.ti -1c
.RI "static void \fBkIdleInit\fP (void)"
.br
.RI "\fIInitialization of Idle thread\&. \fP"
.ti -1c
.RI "static void \fBkIdle\fP (void *arg)"
.br
.RI "\fIIdle thread code\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Implementation of port independent code\&. 


.PP
\fBAuthor:\fP
.RS 4
Nenad Radulovic 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for eSolid - Real-Time Kernel from the source code\&.
