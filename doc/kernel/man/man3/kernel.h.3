.TH "kernel.h" 3 "Tue Oct 29 2013" "Version 1.0BetaR01" "eSolid - Real-Time Kernel" \" -*- nroff -*-
.ad l
.nh
.SH NAME
kernel.h \- 
.PP
Interface of kernel\&.  

.SH SYNOPSIS
.br
.PP
\fC#include 'arch/compiler\&.h'\fP
.br
\fC#include 'arch/cpu\&.h'\fP
.br
\fC#include 'dbg\&.h'\fP
.br
\fC#include 'kernel_cfg\&.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBesThd\fP"
.br
.RI "\fIThread structure\&. \fP"
.ti -1c
.RI "struct \fBesThd::thdL\fP"
.br
.RI "\fIThread linked List structure\&. \fP"
.ti -1c
.RI "struct \fBesVTmr\fP"
.br
.RI "\fIVirtual Timer structure\&. \fP"
.ti -1c
.RI "struct \fBesVTmr::tmrL\fP"
.br
.RI "\fIVirtual Timer linked list structure\&. \fP"
.ti -1c
.RI "struct \fBesThdQ\fP"
.br
.RI "\fIThread Queue structure\&. \fP"
.ti -1c
.RI "struct \fBesThdQ::prioBM\fP"
.br
.RI "\fIPriority Bit Map structure\&. \fP"
.ti -1c
.RI "struct \fBesThdQ::thdLSentinel\fP"
.br
.RI "\fIThread linked list sentinel structure\&. \fP"
.ti -1c
.RI "struct \fBesKernCtrl\fP"
.br
.RI "\fIKernel control block structure\&. \fP"
.in -1c
.SS "Macros"

.PP
.RI "\fBKernel identification and version number\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBES_KERN_VER\fP   0x10000ul"
.br
.RI "\fIIdentifies the underlying kernel version number\&. \fP"
.ti -1c
.RI "#define \fBES_KERN_ID\fP   'eSolid Kernel v1\&.0'"
.br
.RI "\fIKernel identification string\&. \fP"
.in -1c
.in -1c
.PP
.RI "\fBCritical section management\fP"
.br
These macros are used to prevent interrupts on entry into the critical section, and restoring interrupts to their previous state on exit from critical section\&.
.PP
For more details see \fBCritical sections\fP\&. 
.PP
.in +1c
.in +1c
.ti -1c
.RI "#define \fBES_CRITICAL_T\fP   PORT_CRITICAL_T"
.br
.RI "\fICritical section context variable type\&. \fP"
.ti -1c
.RI "#define \fBES_CRITICAL_ENTER\fP(ctx)   \fBPORT_CRITICAL_ENTER\fP(ctx)"
.br
.RI "\fIEnter a critical section\&. \fP"
.ti -1c
.RI "#define \fBES_CRITICAL_EXIT\fP(ctx)   \fBPORT_CRITICAL_EXIT\fP(ctx)"
.br
.RI "\fIExit from critical section\&. \fP"
.ti -1c
.RI "#define \fBES_CRITICAL_ENTER_LOCK_EXIT\fP()"
.br
.RI "\fIEnter critical section and exit scheduler lock\&. \fP"
.ti -1c
.RI "#define \fBES_CRITICAL_EXIT_LOCK_ENTER\fP()"
.br
.RI "\fIExit critical section and enter scheduler lock\&. \fP"
.in -1c
.in -1c
.SS "Functions"

.PP
.RI "\fBGeneral kernel functions\fP"
.br
There are several groups of functions:
.IP "\(bu" 2
kernel initialization and start
.IP "\(bu" 2
ISR prologue and epilogue 
.PP

.PP
.in +1c
.in +1c
.ti -1c
.RI "void \fBesKernInit\fP (void)"
.br
.RI "\fIInitialize kernel internal data structures\&. \fP"
.ti -1c
.RI "PORT_C_NORETURN void \fBesKernStart\fP (void)"
.br
.RI "\fIStart the multi-threading\&. \fP"
.ti -1c
.RI "void \fBesKernSysTmr\fP (void)"
.br
.RI "\fIProcess the system timer event\&. \fP"
.ti -1c
.RI "void \fBesKernIsrPrologueI\fP (void)"
.br
.RI "\fIEnter Interrupt Service Routine\&. \fP"
.ti -1c
.RI "void \fBesKernIsrEpilogueI\fP (void)"
.br
.RI "\fIExit Interrupt Service Routine\&. \fP"
.in -1c
.in -1c
.PP
.RI "\fBScheduler notification and invocation\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "void \fBesSchedRdyAddI\fP (\fBesThd_T\fP *thd)"
.br
.RI "\fIAdd thread \fCthd\fP to the ready thread list and notify the scheduler\&. \fP"
.ti -1c
.RI "void \fBesSchedRdyRmI\fP (\fBesThd_T\fP *thd)"
.br
.RI "\fIRemove thread \fCthd\fP from the ready thread list and notify the scheduler\&. \fP"
.ti -1c
.RI "void \fBesSchedYieldI\fP (void)"
.br
.RI "\fIForce the scheduler invocation which will evaluate all ready threads and switch to ready thread with the highest priority\&. \fP"
.ti -1c
.RI "void \fBesSchedYieldIsrI\fP (void)"
.br
.RI "\fIForce the scheduler invocation which will evaluate all ready threads and switch to ready thread with the highest priority\&. \fP"
.ti -1c
.RI "void \fBesSchedLockEnterI\fP (void)"
.br
.RI "\fILock the scheduler\&. \fP"
.ti -1c
.RI "void \fBesSchedLockExitI\fP (void)"
.br
.RI "\fIUnlock the scheduler\&. \fP"
.ti -1c
.RI "void \fBesSchedLockEnter\fP (void)"
.br
.RI "\fILock the scheduler\&. \fP"
.ti -1c
.RI "void \fBesSchedLockExit\fP (void)"
.br
.RI "\fIUnlock the scheduler\&. \fP"
.in -1c
.in -1c
.PP
.RI "\fBKernel hook functions\fP"
.br

.PP
\fBNote:\fP
.RS 4
1) The definition of this functions must be written by the user\&. 
.RE
.PP

.PP
.in +1c
.in +1c
.ti -1c
.RI "void \fBuserPreSysTmr\fP (void)"
.br
.RI "\fISystem timer hook function, called from system system timer ISR function before the kernel functions\&. \fP"
.ti -1c
.RI "void \fBuserPreKernInit\fP (void)"
.br
.RI "\fIKernel initialization hook function, called from \fBesKernInit()\fP function before kernel initialization\&. \fP"
.ti -1c
.RI "void \fBuserPostKernInit\fP (void)"
.br
.RI "\fIKernel initialization hook function, called from \fBesKernInit()\fP function after kernel initialization\&. \fP"
.ti -1c
.RI "void \fBuserPreKernStart\fP (void)"
.br
.RI "\fIKernel start hook function, called from \fBesKernStart()\fP function\&. \fP"
.ti -1c
.RI "void \fBuserPostThdInit\fP (\fBesThd_T\fP *thd)"
.br
.RI "\fIThread initialization end hook function, called from \fBesThdInit()\fP function\&. \fP"
.ti -1c
.RI "void \fBuserPreThdTerm\fP (void)"
.br
.RI "\fIThread terminate hook function, called from \fBesThdTerm()\fP or when a thread terminates itself\&. \fP"
.ti -1c
.RI "void \fBuserPreIdle\fP (void)"
.br
.RI "\fIPre Idle hook function, called from idle thread, just before entering idle period\&. \fP"
.ti -1c
.RI "void \fBuserPostIdle\fP (void)"
.br
.RI "\fIPost idle hook function, called from idle thread, just after exiting idle period\&. \fP"
.ti -1c
.RI "void \fBuserPreCtxSw\fP (\fBesThd_T\fP *oldThd, \fBesThd_T\fP *newThd)"
.br
.RI "\fIKernel context switch hook function, called from \fBesSchedYieldI()\fP and \fBesSchedYieldIsrI()\fP functions just before context switch\&. \fP"
.in -1c
.in -1c
.SS "Thread management"
Basic thread management services
.PP
For more details see \fBThread Management\fP\&. 
.in +1c
.ti -1c
.RI "#define \fBES_STCK_SIZE\fP(elem)   \fBPORT_STCK_SIZE\fP(elem)"
.br
.RI "\fIConverts the required stack elements into the stack array index\&. \fP"
.ti -1c
.RI "#define \fBES_THD_PRIO_MAX\fP   (\fBCFG_SCHED_PRIO_LVL\fP - 2u)"
.br
.ti -1c
.RI "#define \fBES_THD_PRIO_MIN\fP   (1u)"
.br
.ti -1c
.RI "typedef struct \fBesThd\fP \fBesThd_T\fP"
.br
.RI "\fIThread type\&. \fP"
.ti -1c
.RI "typedef \fBportStck_T\fP \fBesStck_T\fP"
.br
.RI "\fIStack type\&. \fP"
.ti -1c
.RI "void \fBesThdInit\fP (\fBesThd_T\fP *thd, void(*fn)(void *), void *arg, \fBportStck_T\fP *stck, size_t stckSize, uint8_t prio)"
.br
.RI "\fIInitialize the specified thread\&. \fP"
.ti -1c
.RI "void \fBesThdTerm\fP (\fBesThd_T\fP *thd)"
.br
.RI "\fITerminate the specified thread\&. \fP"
.ti -1c
.RI "static \fBPORT_C_INLINE\fP \fBesThd_T\fP * \fBesThdGetId\fP (void)"
.br
.RI "\fIGet the current thread ID\&. \fP"
.ti -1c
.RI "static \fBPORT_C_INLINE\fP uint8_t \fBesThdGetPrio\fP (\fBesThd_T\fP *thd)"
.br
.RI "\fIGet the priority of a thread\&. \fP"
.ti -1c
.RI "void \fBesThdSetPrioI\fP (\fBesThd_T\fP *thd, uint8_t prio)"
.br
.RI "\fISet the priority of a thread\&. \fP"
.ti -1c
.RI "void \fBesThdPostI\fP (\fBesThd_T\fP *thd)"
.br
.RI "\fIPost to thread semaphore\&. \fP"
.ti -1c
.RI "void \fBesThdPost\fP (\fBesThd_T\fP *thd)"
.br
.RI "\fIPost to thread semaphore\&. \fP"
.ti -1c
.RI "void \fBesThdWaitI\fP (void)"
.br
.RI "\fIWait for thread semaphore\&. \fP"
.ti -1c
.RI "void \fBesThdWait\fP (void)"
.br
.RI "\fIWait for thread semaphore\&. \fP"
.in -1c
.SS "Virtual Timer management"

.in +1c
.ti -1c
.RI "typedef uint_fast32_t \fBesTick_T\fP"
.br
.RI "\fITimer tick type\&. \fP"
.ti -1c
.RI "typedef struct \fBesVTmr\fP \fBesVTmr_T\fP"
.br
.RI "\fIVirtual Timer type\&. \fP"
.ti -1c
.RI "void \fBesVTmrInitI\fP (\fBesVTmr_T\fP *vTmr, \fBesTick_T\fP tick, void(*fn)(void *), void *arg)"
.br
.RI "\fIAdd and start a new virtual timer\&. \fP"
.ti -1c
.RI "void \fBesVTmrInit\fP (\fBesVTmr_T\fP *vTmr, \fBesTick_T\fP tick, void(*fn)(void *), void *arg)"
.br
.RI "\fIAdd and start a new virtual timer\&. \fP"
.ti -1c
.RI "void \fBesVTmrTermI\fP (\fBesVTmr_T\fP *vTmr)"
.br
.RI "\fICancel and remove a virtual timer\&. \fP"
.ti -1c
.RI "void \fBesVTmrTerm\fP (\fBesVTmr_T\fP *vTmr)"
.br
.RI "\fICancel and remove a virtual timer\&. \fP"
.ti -1c
.RI "void \fBesVTmrDelay\fP (\fBesTick_T\fP tick)"
.br
.RI "\fIDelay for specified amount of ticks\&. \fP"
.ti -1c
.RI "\fBesTick_T\fP \fBesSysTmrTickGet\fP (void)"
.br
.in -1c
.SS "Thread Queue management"

.in +1c
.ti -1c
.RI "#define \fBPRIO_BM_GRP_INDX\fP   ((\fBCFG_SCHED_PRIO_LVL\fP + PORT_DEF_DATA_WIDTH - 1u) / PORT_DEF_DATA_WIDTH)"
.br
.RI "\fIPriority Bit Map Group Index\&. \fP"
.ti -1c
.RI "typedef struct \fBesThdQ\fP \fBesThdQ_T\fP"
.br
.RI "\fIThread queue type\&. \fP"
.ti -1c
.RI "void \fBesThdQInit\fP (\fBesThdQ_T\fP *thdQ)"
.br
.RI "\fIInitialize Thread Queue\&. \fP"
.ti -1c
.RI "void \fBesThdQTerm\fP (\fBesThdQ_T\fP *thdQ)"
.br
.RI "\fITerminate Thread Queue\&. \fP"
.ti -1c
.RI "void \fBesThdQAddI\fP (\fBesThdQ_T\fP *thdQ, \fBesThd_T\fP *thd)"
.br
.RI "\fIAdd a thread to the Thread Queue\&. \fP"
.ti -1c
.RI "void \fBesThdQRmI\fP (\fBesThdQ_T\fP *thdQ, \fBesThd_T\fP *thd)"
.br
.RI "\fIRemoves the thread from the Thread Queue\&. \fP"
.ti -1c
.RI "\fBesThd_T\fP * \fBesThdQFetchI\fP (const \fBesThdQ_T\fP *thdQ)"
.br
.RI "\fIFetch the first high priority thread from the Thread Queue\&. \fP"
.ti -1c
.RI "\fBesThd_T\fP * \fBesThdQFetchRotateI\fP (\fBesThdQ_T\fP *thdQ, uint_fast8_t prio)"
.br
.RI "\fIFetch the next thread and rotate thread linked list\&. \fP"
.ti -1c
.RI "\fBbool_T\fP \fBesThdQIsEmpty\fP (const \fBesThdQ_T\fP *thdQ)"
.br
.RI "\fIIs thread queue empty\&. \fP"
.in -1c
.SS "Kernel control block"

.in +1c
.ti -1c
.RI "enum \fBesKernState\fP { \fBES_KERN_RUN\fP = 0x00u, \fBES_KERN_INTSRV_RUN\fP = 0x01u, \fBES_KERN_LOCK\fP = 0x02u, \fBES_KERN_INTSRV_LOCK\fP = 0x03u, \fBES_KERN_SLEEP\fP = 0x06u, \fBES_KERN_INIT\fP = 0x08u, \fBES_KERN_INACTIVE\fP = 0x10u }"
.br
.RI "\fIKernel state enumeration\&. \fP"
.ti -1c
.RI "typedef enum \fBesKernState\fP \fBesKernState_T\fP"
.br
.RI "\fIKernel state type\&. \fP"
.ti -1c
.RI "typedef struct \fBesKernCtrl\fP \fBesKernCtrl_T\fP"
.br
.RI "\fIKernel control block type\&. \fP"
.ti -1c
.RI "const volatile \fBesKernCtrl_T\fP \fBgKernCtrl\fP"
.br
.RI "\fIKernel control block\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Interface of kernel\&. 


.PP
\fBAuthor:\fP
.RS 4
Nenad Radulovic 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for eSolid - Real-Time Kernel from the source code\&.
