.TH "kernel.h" 3 "Sat Nov 30 2013" "Version 1.0BetaR02" "eSolid - Real-Time Kernel" \" -*- nroff -*-
.ad l
.nh
.SH NAME
kernel.h \- 
.PP
Main kernel interface\&.  

.SH SYNOPSIS
.br
.PP
\fC#include 'arch/kcore\&.h'\fP
.br
\fC#include 'base/bitop\&.h'\fP
.br
\fC#include 'base/dbg\&.h'\fP
.br
\fC#include 'kernel/kernel_cfg\&.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBesThd\fP"
.br
.RI "\fIThread structure\&. \fP"
.ti -1c
.RI "struct \fBesThd::thdL_\fP"
.br
.RI "\fIThread linked List structure\&. \fP"
.ti -1c
.RI "struct \fBesThdQ\fP"
.br
.RI "\fIThread Queue structure\&. \fP"
.ti -1c
.RI "struct \fBesThdQ::pbm_\fP"
.br
.RI "\fIPriority Bit Map structure\&. \fP"
.ti -1c
.RI "struct \fBesThdQ::thdLSent_\fP"
.br
.RI "\fIThread linked list sentinel structure\&. \fP"
.ti -1c
.RI "struct \fBesVTmr\fP"
.br
.RI "\fIVirtual Timer structure\&. \fP"
.ti -1c
.RI "struct \fBesVTmr::tmrL_\fP"
.br
.RI "\fIVirtual Timer linked list structure\&. \fP"
.ti -1c
.RI "struct \fBkernCtrl_\fP"
.br
.RI "\fIKernel control block structure\&. \fP"
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBES_KERN_VER_MAJOR\fP   1ul"
.br
.RI "\fIIdentifies kernel major version number\&. \fP"
.ti -1c
.RI "#define \fBES_KERN_VER_MINOR\fP   0ul"
.br
.RI "\fIIdentifies kernel minor version number\&. \fP"
.ti -1c
.RI "#define \fBES_KERN_VER_PATCH\fP   0ul"
.br
.RI "\fIIdentifies kernel patch level\&. \fP"
.ti -1c
.RI "#define \fBES_KERN_VER\fP   (((\fBES_KERN_VER_MAJOR\fP) << 24) | (\fBES_KERN_VER_MINOR\fP << 16) | (\fBES_KERN_VER_PATCH\fP))"
.br
.RI "\fIIdentifies the underlying kernel version number\&. \fP"
.ti -1c
.RI "#define \fBES_KERN_ID\fP   'eSolid - RT Kernel'"
.br
.RI "\fIKernel identification string\&. \fP"
.ti -1c
.RI "#define \fBES_STCK_SIZE\fP(elem)   \fBPORT_STCK_SIZE\fP(elem)"
.br
.RI "\fIConverts the required stack elements into the stack array index\&. \fP"
.ti -1c
.RI "#define \fBES_DEF_THD_PRIO_MAX\fP   (\fBCFG_SCHED_PRIO_LVL\fP - 2u)"
.br
.RI "\fIMaximum level of priority possible for application thread\&. \fP"
.ti -1c
.RI "#define \fBES_DEF_THD_PRIO_MIN\fP   (1u)"
.br
.RI "\fIMinimum level of priority possible for application thread\&. \fP"
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fBesThd\fP \fBesThd_T\fP"
.br
.RI "\fIThread type\&. \fP"
.ti -1c
.RI "typedef \fBportStck_T\fP \fBesStck_T\fP"
.br
.RI "\fIStack type\&. \fP"
.ti -1c
.RI "typedef struct \fBesThdQ\fP \fBesThdQ_T\fP"
.br
.RI "\fIThread queue type\&. \fP"
.ti -1c
.RI "typedef uint_fast32_t \fBesTick_T\fP"
.br
.RI "\fITimer tick type\&. \fP"
.ti -1c
.RI "typedef struct \fBesVTmr\fP \fBesVTmr_T\fP"
.br
.RI "\fIVirtual Timer type\&. \fP"
.ti -1c
.RI "typedef enum \fBesKernState\fP \fBesKernState_T\fP"
.br
.RI "\fIKernel state type\&. \fP"
.ti -1c
.RI "typedef portReg_T \fBesLockCtx_T\fP"
.br
.RI "\fIKernel lock context type\&. \fP"
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBesKernState\fP { \fBES_KERN_RUN\fP = 0x00u, \fBES_KERN_INTSRV_RUN\fP = 0x01u, \fBES_KERN_LOCK\fP = 0x02u, \fBES_KERN_INTSRV_LOCK\fP = 0x03u, \fBES_KERN_SLEEP\fP = 0x06u, \fBES_KERN_INIT\fP = 0x08u, \fBES_KERN_INACTIVE\fP = 0x10u }"
.br
.RI "\fIKernel state enumeration\&. \fP"
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBesKernInit\fP (void)"
.br
.RI "\fIInitialize kernel internal data structures\&. \fP"
.ti -1c
.RI "PORT_C_NORETURN void \fBesKernStart\fP (void)"
.br
.RI "\fIStart the multi-threading\&. \fP"
.ti -1c
.RI "void \fBesKernSysTmr\fP (void)"
.br
.RI "\fIProcess the system timer event\&. \fP"
.ti -1c
.RI "void \fBesKernIsrEnterI\fP (void)"
.br
.RI "\fIEnter Interrupt Service Routine\&. \fP"
.ti -1c
.RI "void \fBesKernIsrExitI\fP (void)"
.br
.RI "\fIExit Interrupt Service Routine\&. \fP"
.ti -1c
.RI "void \fBesKernLockIntEnter\fP (\fBesLockCtx_T\fP *lockCtx)"
.br
.RI "\fIEnter a critical code lock\&. \fP"
.ti -1c
.RI "void \fBesKernLockIntExit\fP (\fBesLockCtx_T\fP lockCtx)"
.br
.RI "\fIExit a critical code lock\&. \fP"
.ti -1c
.RI "void \fBesKernLockEnterI\fP (void)"
.br
.RI "\fILock the scheduler\&. \fP"
.ti -1c
.RI "void \fBesKernLockExitI\fP (void)"
.br
.RI "\fIUnlock the scheduler\&. \fP"
.ti -1c
.RI "void \fBesKernLockEnter\fP (void)"
.br
.RI "\fILock the scheduler\&. \fP"
.ti -1c
.RI "void \fBesKernLockExit\fP (void)"
.br
.RI "\fIUnlock the scheduler\&. \fP"
.ti -1c
.RI "void \fBesThdInit\fP (\fBesThd_T\fP *thd, void(*fn)(void *), void *arg, \fBportStck_T\fP *stck, size_t stckSize, uint8_t prio)"
.br
.RI "\fIInitialize the specified thread\&. \fP"
.ti -1c
.RI "void \fBesThdTerm\fP (\fBesThd_T\fP *thd)"
.br
.RI "\fITerminate the specified thread\&. \fP"
.ti -1c
.RI "static \fBPORT_C_INLINE\fP \fBesThd_T\fP * \fBesThdGetId\fP (void)"
.br
.RI "\fIGet the current thread ID\&. \fP"
.ti -1c
.RI "static \fBPORT_C_INLINE\fP uint8_t \fBesThdGetPrio\fP (\fBesThd_T\fP *thd)"
.br
.RI "\fIGet the priority of a thread\&. \fP"
.ti -1c
.RI "void \fBesThdSetPrioI\fP (\fBesThd_T\fP *thd, uint8_t prio)"
.br
.RI "\fISet the priority of a thread\&. \fP"
.ti -1c
.RI "void \fBesThdQInit\fP (\fBesThdQ_T\fP *thdQ)"
.br
.RI "\fIInitialize Thread Queue\&. \fP"
.ti -1c
.RI "void \fBesThdQTerm\fP (\fBesThdQ_T\fP *thdQ)"
.br
.RI "\fITerminate Thread Queue\&. \fP"
.ti -1c
.RI "void \fBesThdQAddI\fP (\fBesThdQ_T\fP *thdQ, \fBesThd_T\fP *thd)"
.br
.RI "\fIAdd a thread to the Thread Queue\&. \fP"
.ti -1c
.RI "void \fBesThdQRmI\fP (\fBesThdQ_T\fP *thdQ, \fBesThd_T\fP *thd)"
.br
.RI "\fIRemoves the thread from the Thread Queue\&. \fP"
.ti -1c
.RI "\fBesThd_T\fP * \fBesThdQFetchI\fP (const \fBesThdQ_T\fP *thdQ)"
.br
.RI "\fIFetch the first high priority thread from the Thread Queue\&. \fP"
.ti -1c
.RI "\fBesThd_T\fP * \fBesThdQFetchRotateI\fP (\fBesThdQ_T\fP *thdQ, uint_fast8_t prio)"
.br
.RI "\fIFetch the next thread and rotate thread linked list\&. \fP"
.ti -1c
.RI "\fBbool_T\fP \fBesThdQIsEmpty\fP (const \fBesThdQ_T\fP *thdQ)"
.br
.RI "\fIIs thread queue empty\&. \fP"
.ti -1c
.RI "void \fBesSchedRdyAddI\fP (\fBesThd_T\fP *thd)"
.br
.RI "\fIAdd thread \fCthd\fP to the ready thread list and notify the scheduler\&. \fP"
.ti -1c
.RI "void \fBesSchedRdyRmI\fP (\fBesThd_T\fP *thd)"
.br
.RI "\fIRemove thread \fCthd\fP from the ready thread list and notify the scheduler\&. \fP"
.ti -1c
.RI "void \fBesSchedYieldI\fP (void)"
.br
.RI "\fIForce the scheduler invocation which will evaluate all ready threads and switch to ready thread with the highest priority\&. \fP"
.ti -1c
.RI "void \fBesSchedYieldIsrI\fP (void)"
.br
.RI "\fIForce the scheduler invocation which will evaluate all ready threads and switch to ready thread with the highest priority\&. \fP"
.ti -1c
.RI "void \fBesVTmrInitI\fP (\fBesVTmr_T\fP *vTmr, \fBesTick_T\fP tick, void(*fn)(void *), void *arg)"
.br
.RI "\fIAdd and start a new virtual timer\&. \fP"
.ti -1c
.RI "void \fBesVTmrInit\fP (\fBesVTmr_T\fP *vTmr, \fBesTick_T\fP tick, void(*fn)(void *), void *arg)"
.br
.RI "\fIAdd and start a new virtual timer\&. \fP"
.ti -1c
.RI "void \fBesVTmrTermI\fP (\fBesVTmr_T\fP *vTmr)"
.br
.RI "\fICancel and remove a virtual timer\&. \fP"
.ti -1c
.RI "void \fBesVTmrTerm\fP (\fBesVTmr_T\fP *vTmr)"
.br
.RI "\fICancel and remove a virtual timer\&. \fP"
.ti -1c
.RI "void \fBesVTmrDelay\fP (\fBesTick_T\fP tick)"
.br
.RI "\fIDelay for specified amount of ticks\&. \fP"
.ti -1c
.RI "\fBesTick_T\fP \fBesSysTmrTickGet\fP (void)"
.br
.RI "\fIGet the current tick value\&. \fP"
.ti -1c
.RI "void \fBuserPreSysTmr\fP (void)"
.br
.RI "\fISystem timer hook function, called from system system timer ISR function before the kernel functions\&. \fP"
.ti -1c
.RI "void \fBuserPreKernInit\fP (void)"
.br
.RI "\fIKernel initialization hook function, called from \fBesKernInit()\fP function before kernel initialization\&. \fP"
.ti -1c
.RI "void \fBuserPostKernInit\fP (void)"
.br
.RI "\fIKernel initialization hook function, called from \fBesKernInit()\fP function after kernel initialization\&. \fP"
.ti -1c
.RI "void \fBuserPreKernStart\fP (void)"
.br
.RI "\fIKernel start hook function, called from \fBesKernStart()\fP function\&. \fP"
.ti -1c
.RI "void \fBuserPostThdInit\fP (\fBesThd_T\fP *thd)"
.br
.RI "\fIThread initialization end hook function, called from \fBesThdInit()\fP function\&. \fP"
.ti -1c
.RI "void \fBuserPreThdTerm\fP (void)"
.br
.RI "\fIThread terminate hook function, called from \fBesThdTerm()\fP or when a thread terminates itself\&. \fP"
.ti -1c
.RI "void \fBuserPreIdle\fP (void)"
.br
.RI "\fIPre Idle hook function, called from idle thread, just before entering idle period\&. \fP"
.ti -1c
.RI "void \fBuserPostIdle\fP (void)"
.br
.RI "\fIPost idle hook function, called from idle thread, just after exiting idle period\&. \fP"
.ti -1c
.RI "void \fBuserPreCtxSw\fP (\fBesThd_T\fP *oldThd, \fBesThd_T\fP *newThd)"
.br
.RI "\fIKernel context switch hook function, called from \fBesSchedYieldI()\fP and \fBesSchedYieldIsrI()\fP functions just before context switch\&. \fP"
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "const struct \fBkernCtrl_\fP \fBKernCtrl\fP"
.br
.RI "\fIKernel control block\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Main kernel interface\&. 


.PP
\fBAuthor:\fP
.RS 4
Nenad Radulovic 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for eSolid - Real-Time Kernel from the source code\&.
