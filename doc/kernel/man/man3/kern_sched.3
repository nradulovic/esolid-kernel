.TH "Scheduler notification and invocation" 3 "Sat Nov 30 2013" "Version 1.0BetaR02" "eSolid - Real-Time Kernel" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Scheduler notification and invocation \- 
.PP
Low-level scheduler services\&.  

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBesSchedRdyAddI\fP (\fBesThd_T\fP *thd)"
.br
.RI "\fIAdd thread \fCthd\fP to the ready thread list and notify the scheduler\&. \fP"
.ti -1c
.RI "void \fBesSchedRdyRmI\fP (\fBesThd_T\fP *thd)"
.br
.RI "\fIRemove thread \fCthd\fP from the ready thread list and notify the scheduler\&. \fP"
.ti -1c
.RI "void \fBesSchedYieldI\fP (void)"
.br
.RI "\fIForce the scheduler invocation which will evaluate all ready threads and switch to ready thread with the highest priority\&. \fP"
.ti -1c
.RI "void \fBesSchedYieldIsrI\fP (void)"
.br
.RI "\fIForce the scheduler invocation which will evaluate all ready threads and switch to ready thread with the highest priority\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Low-level scheduler services\&. 


.SH "Function Documentation"
.PP 
.SS "void esSchedRdyAddI (\fBesThd_T\fP *thd)"

.PP
Add thread \fCthd\fP to the ready thread list and notify the scheduler\&. 
.PP
\fBParameters:\fP
.RS 4
\fIthd\fP Pointer to the initialized thread ID structure, \fBesThd\fP\&. 
.RE
.PP
\fBPrecondition:\fP
.RS 4
1) \fCThe kernel state < ES_KERN_INACTIVE\fP, see \fBKernel states\fP\&. 
.PP
2) \fCthd != NULL\fP 
.PP
3) \fCthd->signature == DEF_THD_CONTRACT_SIGNATURE\fP, the pointer must point to a valid \fBesThd\fP structure\&. 
.PP
4) \fCthd->thdL_\&.q == NULL\fP, thread must not be in a queue\&. 
.RE
.PP
\fBThis service can be called from:\fP
.RS 4

.IP "\(bu" 2
Application initialization code
.IP "\(bu" 2
Application thread code
.IP "\(bu" 2
Interrupt service routine 
.PP
.RE
.PP
\fBRescheduling:\fP
.RS 4

.IP "\(bu" 2
never 
.PP
.RE
.PP
\fBFunction class:\fP
.RS 4
\fBI class\fP, Interrupt-lock API function, this function can be called only from interrupts locked code sections\&. 
.RE
.PP

.SS "void esSchedRdyRmI (\fBesThd_T\fP *thd)"

.PP
Remove thread \fCthd\fP from the ready thread list and notify the scheduler\&. 
.PP
\fBParameters:\fP
.RS 4
\fIthd\fP Pointer to the initialized thread ID structure, \fBesThd\fP\&. 
.RE
.PP
\fBPrecondition:\fP
.RS 4
1) \fCThe kernel state < ES_KERN_INACTIVE\fP, see \fBKernel states\fP\&. 
.PP
2) \fCthd != NULL\fP 
.PP
3) \fCthd->signature == DEF_THD_CONTRACT_SIGNATURE\fP, the pointer must point to a valid \fBesThd\fP structure\&. 
.PP
4) \fCthd->thdL_\&.q == &gRdyQueue\fP, thread must be in Ready Threads queue\&. 
.RE
.PP
\fBThis service can be called from:\fP
.RS 4

.IP "\(bu" 2
Application initialization code
.IP "\(bu" 2
Application thread code
.IP "\(bu" 2
Interrupt service routine 
.PP
.RE
.PP
\fBRescheduling:\fP
.RS 4

.IP "\(bu" 2
never 
.PP
.RE
.PP
\fBFunction class:\fP
.RS 4
\fBI class\fP, Interrupt-lock API function, this function can be called only from interrupts locked code sections\&. 
.RE
.PP

.SS "void esSchedYieldI (void)"

.PP
Force the scheduler invocation which will evaluate all ready threads and switch to ready thread with the highest priority\&. 
.PP
\fBPrecondition:\fP
.RS 4
1) \fCThe kernel state < ES_KERN_INACTIVE\fP, see \fBKernel states\fP\&. 
.RE
.PP
\fBThis service can be called from:\fP
.RS 4

.IP "\(bu" 2
Application thread code 
.PP
.RE
.PP
\fBRescheduling:\fP
.RS 4

.IP "\(bu" 2
possible 
.PP
.RE
.PP
\fBFunction class:\fP
.RS 4
\fBI class\fP, Interrupt-lock API function, this function can be called only from interrupts locked code sections\&. 
.RE
.PP

.SS "void esSchedYieldIsrI (void)"

.PP
Force the scheduler invocation which will evaluate all ready threads and switch to ready thread with the highest priority\&. 
.PP
\fBPrecondition:\fP
.RS 4
1) \fCThe kernel state < ES_KERN_INACTIVE\fP, see \fBKernel states\fP\&. 
.RE
.PP
\fBThis service can be called from:\fP
.RS 4

.IP "\(bu" 2
Interrupt service routine 
.PP
.RE
.PP
\fBRescheduling:\fP
.RS 4

.IP "\(bu" 2
possible 
.PP
.RE
.PP
\fBFunction class:\fP
.RS 4
\fBI class\fP, Interrupt-lock API function, this function can be called only from interrupts locked code sections\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for eSolid - Real-Time Kernel from the source code\&.
