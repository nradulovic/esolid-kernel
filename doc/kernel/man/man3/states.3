.TH "states" 3 "Tue Oct 29 2013" "Version 1.0BetaR01" "eSolid - Real-Time Kernel" \" -*- nroff -*-
.ad l
.nh
.SH NAME
states \- Kernel states 
Details about kernel states
.PP

.br

.br

.br
.SH "Intro"
.PP
A Kernel state machine is a behavior model of the kernel core\&. Each state defines what methods are allowed\&.
.SH "eSolid RT Kernel states"
.PP
The kernel can be in one of the following states:  
.PP
\fBINACTIVE\fP
.RS 4
Inactive state of the kernel (Level 5)\&. This state is entered after a physical reset\&. When the system is in this state all the maskable interrupt sources are disabled\&. In this state none of kernel internal data structures are initialized\&. In this state it is not possible to use any Kernel API except \fBesKernInit()\fP\&.
.RE
.PP
\fBINIT\fP
.RS 4
Initialization state of the kernel (Level 4)\&. In this state all internal data structures are initialized but the kernel is still not running\&. In this stage new threads can be created by calling \fBesThdInit()\fP function\&. Also, the application is allowed to use API which is used to create kernel structures like Thread Queues \fBesThdQ\fP\&. All the maskable interrupt sources are DISABLED\&.
.RE
.PP
\fBRUN\fP
.RS 4
Normal, running state of the kernel (Level 0)\&. To start multi-threading just call the \fBesKernStart()\fP function\&. This function will switch the kernel into \fCRUN\fP state and multi-threading of created threads will commence\&. During the \fCRUN\fP state you are allowed to create other task as well\&. All the interrupt sources are enabled and the system APIs are accessible, threads are running\&. All the maskable interrupt sources are ENABLED\&.
.RE
.PP
\fBLOCK\fP
.RS 4
Scheduler locked state, no context switching (Level 2)\&. The running state of the kernel can be switched to \fCLOCK\fP state where the scheduler is locked and no context switching is allowed\&. \fCLOCK\fP state is one way of preventing the access to a shared resource\&. One more reason to lock the scheduler would be during the accessing of special hardware (e\&.g\&. programming the FLASH memory) which does not allow interruption of the running operation\&. Usage of scheduler locks should be kept at minimum\&. All the maskable interrupt sources are ENABLED\&.
.RE
.PP
\fBINTSRV_RUN or INTSRV_LOCK\fP
.RS 4
Interrupt Service state, no context switching (Levels 1 and 3)\&. During the both states \fCRUN\fP and \fCLOCK\fP, an interrupt event can occur\&. When Interrupt Service Routine is executing the kernel is in \fCINTSRV_RUN\fP or \fCINTSRV_LOCK\fP state\&. Each state corresponds to the state where the execution was interrupted from and the kernel will return to it's original state\&.
.RE
.PP
\fBSLEEP\fP
.RS 4
When idle condition occurs the kernel will switch to \fCSLEEP\fP state (if power saving is enabled)\&. In order to return to \fCRUN\fP state an interrupt must occur whether from system timer or any other interrupt source which must request a context switch upon exit from ISR\&.
.RE
.PP
\fBNote:\fP
.RS 4
The level of state \fCINACTIVE\fP is the highest\&. As the kernel boots up the level is decremented\&. The running state is level 0\&. 
.RE
.PP

