.TH "General kernel functions" 3 "Sat Nov 30 2013" "Version 1.0BetaR02" "eSolid - Real-Time Kernel" \" -*- nroff -*-
.ad l
.nh
.SH NAME
General kernel functions \- 
.PP
Kernel initialization, start-up, ISR management\&.  

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBesKernInit\fP (void)"
.br
.RI "\fIInitialize kernel internal data structures\&. \fP"
.ti -1c
.RI "PORT_C_NORETURN void \fBesKernStart\fP (void)"
.br
.RI "\fIStart the multi-threading\&. \fP"
.ti -1c
.RI "void \fBesKernSysTmr\fP (void)"
.br
.RI "\fIProcess the system timer event\&. \fP"
.ti -1c
.RI "void \fBesKernIsrEnterI\fP (void)"
.br
.RI "\fIEnter Interrupt Service Routine\&. \fP"
.ti -1c
.RI "void \fBesKernIsrExitI\fP (void)"
.br
.RI "\fIExit Interrupt Service Routine\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Kernel initialization, start-up, ISR management\&. 

There are several groups of functions:
.IP "\(bu" 2
kernel initialization and start
.IP "\(bu" 2
ISR enter and exit 
.PP

.SH "Function Documentation"
.PP 
.SS "void esKernInit (void)"

.PP
Initialize kernel internal data structures\&. 
.PP
\fBPrecondition:\fP
.RS 4
1) \fCThe kernel state == ES_KERN_INACTIVE\fP, see \fBKernel states\fP\&. 
.RE
.PP
\fBPostcondition:\fP
.RS 4
1) \fCThe kernel state == ES_KERN_INIT\fP\&. 
.RE
.PP
\fBNote:\fP
.RS 4
1) This function may be invoked only once\&.
.RE
.PP
This function must be called first before any other kernel API\&. It initializes internal data structures that are used by other API functions\&. 
.PP
\fBThis service can be called from:\fP
.RS 4

.IP "\(bu" 2
Application initialization code 
.PP
.RE
.PP
\fBRescheduling:\fP
.RS 4

.IP "\(bu" 2
never 
.PP
.RE
.PP
\fBObject class:\fP
.RS 4
Regular \fBAPI\fP object, this object is part of the application programming interface\&. 
.RE
.PP

.SS "PORT_C_NORETURN void esKernStart (void)"

.PP
Start the multi-threading\&. 
.PP
\fBPrecondition:\fP
.RS 4
1) \fCThe kernel state == ES_KERN_INIT\fP, see \fBKernel states\fP\&. 
.RE
.PP
\fBPostcondition:\fP
.RS 4
1) \fCThe kernel state == ES_KERN_RUN\fP 
.PP
2) The multi-threading execution will commence\&. 
.RE
.PP
\fBNote:\fP
.RS 4
1) Once this function is called the execution of threads will start and this function will never return\&.
.RE
.PP
This function will start multi-threading\&. Once the multi-threading has started the execution will never return to this function again (this function never returns)\&. 
.PP
\fBThis service can be called from:\fP
.RS 4

.IP "\(bu" 2
Application initialization code 
.PP
.RE
.PP
\fBRescheduling:\fP
.RS 4

.IP "\(bu" 2
always 
.PP
.RE
.PP
\fBObject class:\fP
.RS 4
Regular \fBAPI\fP object, this object is part of the application programming interface\&. 
.RE
.PP

.SS "void esKernSysTmr (void)"

.PP
Process the system timer event\&. 
.PP
\fBPrecondition:\fP
.RS 4
1) \fCThe kernel state < ES_KERN_INIT\fP, see \fBKernel states\fP\&.
.RE
.PP
This function will be called only by port system timer interrupt\&. 
.PP
\fBObject class:\fP
.RS 4
\fBNot API\fP object, this object is not part of the application programming interface and it is intended for internal use only\&. 
.RE
.PP

.SS "void esKernIsrEnterI (void)"

.PP
Enter Interrupt Service Routine\&. 
.PP
\fBPrecondition:\fP
.RS 4
1) \fCThe kernel state < ES_KERN_INIT\fP, see \fBKernel states\fP\&. 
.RE
.PP
\fBNote:\fP
.RS 4
1) You must call \fBesKernIsrExitI()\fP at the exit of ISR\&. 
.PP
2) You must invoke \fBesKernIsrEnterI()\fP and \fBesKernIsrExitI()\fP in pair\&. In other words, for every call to \fBesKernIsrEnterI()\fP at the beginning of the ISR you must have a call to \fBesKernIsrExitI()\fP at the end of the ISR\&.
.RE
.PP
Function will notify kernel that you are about to enter interrupt service routine (ISR)\&. This allows kernel to keep track of interrupt nesting and then only perform rescheduling at the last nested ISR\&. 
.PP
\fBThis service can be called from:\fP
.RS 4

.IP "\(bu" 2
Interrupt service routine 
.PP
.RE
.PP
\fBRescheduling:\fP
.RS 4

.IP "\(bu" 2
never 
.PP
.RE
.PP
\fBFunction class:\fP
.RS 4
\fBI class\fP, Interrupt-lock API function, this function can be called only from interrupts locked code sections\&. 
.RE
.PP

.SS "void esKernIsrExitI (void)"

.PP
Exit Interrupt Service Routine\&. 
.PP
\fBPrecondition:\fP
.RS 4
1) \fCThe kernel state < ES_KERN_INIT\fP, see \fBKernel states\fP\&. 
.RE
.PP
\fBNote:\fP
.RS 4
1) You must invoke \fBesKernIsrEnterI()\fP and \fBesKernIsrExitI()\fP in pair\&. In other words, for every call to \fBesKernIsrEnterI()\fP at the beginning of the ISR you must have a call to \fBesKernIsrExitI()\fP at the end of the ISR\&. 
.PP
2) Rescheduling is prevented when the scheduler is locked (see \fBesKernLockEnterI()\fP)
.RE
.PP
This function is used to notify kernel that you have completed servicing an interrupt\&. When the last nested ISR has completed, the function will call the scheduler to determine whether a new, high-priority task, is ready to run\&. 
.PP
\fBThis service can be called from:\fP
.RS 4

.IP "\(bu" 2
Interrupt service routine 
.PP
.RE
.PP
\fBRescheduling:\fP
.RS 4

.IP "\(bu" 2
possible 
.PP
.RE
.PP
\fBFunction class:\fP
.RS 4
\fBI class\fP, Interrupt-lock API function, this function can be called only from interrupts locked code sections\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for eSolid - Real-Time Kernel from the source code\&.
