.TH "Compiler port" 3 "Tue Oct 29 2013" "Version 1.0BetaR01" "eSolid - Real-Time Kernel" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Compiler port \- 
.PP
Compiler provided macros and data types\&.  

.SS "Compiler provided macros"
Port interface macros and port specific macros
.PP
These macros are used to ease the writing of ports\&. All macros prefixed with \fBPORT_\fP are part of the port interface\&. 
.in +1c
.ti -1c
.RI "#define \fBPORT_C_INLINE\fP   inline"
.br
.RI "\fIC extension - make a function inline\&. \fP"
.ti -1c
.RI "#define \fBPORT_C_INLINE_ALWAYS\fP   inline"
.br
.RI "\fIC extension - make a function inline - always\&. \fP"
.ti -1c
.RI "#define \fBPORT_C_NAKED\fP"
.br
.RI "\fIOmit function prologue/epilogue sequences\&. \fP"
.ti -1c
.RI "#define \fBPORT_C_FUNC\fP   'unknown'"
.br
.RI "\fIProvides function name for assert macros\&. \fP"
.ti -1c
.RI "#define \fBPORT_C_WEAK\fP"
.br
.RI "\fIDeclares a weak function\&. \fP"
.ti -1c
.RI "#define \fBPORT_C_ALIGNED\fP(expr)"
.br
.RI "\fIThis attribute specifies a minimum alignment (in bytes) for variables of the specified type\&. \fP"
.ti -1c
.RI "#define \fBPORT_HWREG_SET\fP(reg, mask, val)"
.br
.RI "\fIA standardized way of properly setting the value of HW register\&. \fP"
.in -1c
.SS "Compiler provided data types"
The compiler port must provide some C90 (C99) data types
.PP
The compiler port must:
.IP "\(bu" 2
declare sets of integer types having specified widths, standard type definitions and shall define corresponding sets of macros\&.
.PP
.PP
Types are defined in the following categories:
.IP "\(bu" 2
Integer types having certain exact widths
.IP "\(bu" 2
Fastest integer types having at least certain specified widths
.IP "\(bu" 2
Integer types wide enough to hold pointers to objects
.IP "\(bu" 2
standard type definitions
.PP
.PP
The following exact-width integer types are required:
.IP "\(bu" 2
int8_t
.IP "\(bu" 2
int16_t
.IP "\(bu" 2
int32_t
.IP "\(bu" 2
uint8_t
.IP "\(bu" 2
uint16_t
.IP "\(bu" 2
uint32_t
.PP
.PP
The following fastest minimum-width integer types are required:
.IP "\(bu" 2
int_fast8_t
.IP "\(bu" 2
int_fast16_t
.IP "\(bu" 2
int_fast32_t
.IP "\(bu" 2
uint_fast8_t
.IP "\(bu" 2
uint_fast16_t
.IP "\(bu" 2
uint_fast32_t
.PP
.PP
The following integer types capable of holding object pointers are required:
.IP "\(bu" 2
intptr_t
.IP "\(bu" 2
uintptr_t
.PP
.PP
The following standard type definitions are required:
.IP "\(bu" 2
NULL
.IP "\(bu" 2
ptrdiff_t
.IP "\(bu" 2
size_t 
.PP

.in +1c
.ti -1c
.RI "enum \fBboolType\fP { \fBTRUE\fP = 1U, \fBFALSE\fP = 0U }"
.br
.RI "\fIBool data type\&. \fP"
.ti -1c
.RI "typedef enum \fBboolType\fP \fBbool_T\fP"
.br
.RI "\fIBool data type\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Compiler provided macros and data types\&. 


.SH "Macro Definition Documentation"
.PP 
.SS "#define PORT_C_INLINE   inline"

.PP
C extension - make a function inline\&. The point of making a function \fCinline\fP is to hint to the compiler that it is worth making some form of extra effort to call the function faster than it would otherwise - generally by substituting the code of the function into its caller\&. As well as eliminating the need for a call and return sequence, it might allow the compiler to perform certain optimizations between the bodies of both functions\&. 
.SS "#define PORT_C_INLINE_ALWAYS   inline"

.PP
C extension - make a function inline - always\&. Generally, functions are not inlined unless optimization is specified\&. For functions declared inline, this attribute inlines the function even if no optimization level was specified\&. 
.SS "#define PORT_C_NAKED"

.PP
Omit function prologue/epilogue sequences\&. This attribute will indicate that the specified function does not need prologue/epilogue sequences generated by the compiler\&. It is up to the programmer to provide these sequences\&. The only statements that can be safely included in naked functions are \fCasm\fP statements that do not have operands\&. All other statements, including declarations of local variables, \fCif\fP statements, and so forth, should be avoided\&. Naked functions should be used to implement the body of an assembly function, while allowing the compiler to construct the requisite function declaration for the assembler\&. 
.SS "#define PORT_C_FUNC   'unknown'"

.PP
Provides function name for assert macros\&. 
.SS "#define PORT_C_WEAK"

.PP
Declares a weak function\&. The weak attribute causes the declaration to be emitted as a weak symbol rather than a global\&. This is primarily useful in defining library functions that can be overridden in user code, though it can also be used with non-function declarations\&. 
.SS "#define PORT_C_ALIGNED(expr)"

.PP
This attribute specifies a minimum alignment (in bytes) for variables of the specified type\&. 
.PP
\fBNote:\fP
.RS 4
The alignment of any given struct or union type is required by the ISO C standard to be at least a perfect multiple of the lowest common multiple of the alignments of all of the members of the struct or union in question\&. 
.RE
.PP

.SS "#define PORT_HWREG_SET(reg, mask, val)"
\fBValue:\fP
.PP
.nf
do {                                                                        \\
        portReg_T tmp;                                                          \
        tmp = (reg);                                                            \
        tmp &= ~(mask);                                                         \
        tmp |= ((mask) & (val));                                                \
        (reg) = tmp;                                                            \
    } while (0U)
.fi
.PP
A standardized way of properly setting the value of HW register\&. 
.PP
\fBParameters:\fP
.RS 4
\fIreg\fP Register which will be written to 
.br
\fImask\fP The bit mask which will be applied to register and \fCval\fP argument 
.br
\fIval\fP Value to be written into the register 
.RE
.PP

.SH "Typedef Documentation"
.PP 
.SS "typedef enum \fBboolType\fP  \fBbool_T\fP"

.PP
Bool data type\&. 
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBboolType\fP"

.PP
Bool data type\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fITRUE \fP\fP
TRUE\&. TRUE 
.TP
\fB\fIFALSE \fP\fP
FALSE\&. FALSE 
.SH "Author"
.PP 
Generated automatically by Doxygen for eSolid - Real-Time Kernel from the source code\&.
