.TH "cpu.h" 3 "Tue Oct 29 2013" "Version 1.0BetaR01" "eSolid - Real-Time Kernel" \" -*- nroff -*-
.ad l
.nh
.SH NAME
cpu.h \- 
.PP
Interface of CPU port - Template\&.  

.SH SYNOPSIS
.br
.PP
\fC#include 'cpu_cfg\&.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBportStck\fP"
.br
.RI "\fIStack structure used for stack declaration in order to force the alignment Alignment of stack structure\&. \fP"
.ti -1c
.RI "struct \fBportCtx\fP"
.br
.RI "\fIPort context structure\&. \fP"
.in -1c
.SS "Macros"

.PP
.RI "\fBPort constants\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBPORT_DATA_WIDTH_VAL\fP   8U"
.br
.RI "\fIThis macro specifies the bit width of CPU data registers\&. \fP"
.ti -1c
.RI "#define \fBPORT_STCK_MINSIZE_VAL\fP   (sizeof(struct \fBportCtx\fP) / sizeof(\fBportReg_T\fP))"
.br
.RI "\fIThis macro specifies the minimal size of the thread stack\&. \fP"
.ti -1c
.RI "#define \fBPORT_SYSTMR_ONE_TICK_VAL\fP   (\fBCFG_SYSTMR_CLOCK_FREQUENCY\fP / \fBCFG_SYSTMR_EVENT_FREQUENCY\fP)"
.br
.RI "\fISystem timer reload value for one tick\&. \fP"
.ti -1c
.RI "#define \fBPORT_SYSTMR_MAX_VAL\fP   0xFFU"
.br
.RI "\fISystem timer maximum value\&. \fP"
.ti -1c
.RI "#define \fBPORT_SYSTMR_MAX_TICKS_VAL\fP   (\fBPORT_SYSTMR_MAX_VAL\fP / PORT_SYSTMR_RELOAD_VAL)"
.br
.RI "\fIMaximum number of ticks the system timer can accept\&. \fP"
.ti -1c
.RI "#define \fBPORT_KVTMR_STCK_SIZE\fP   40U"
.br
.RI "\fIKernel Virtual Timer Thread stack size\&. \fP"
.ti -1c
.RI "#define \fBPORT_KIDLE_STCK_SIZE\fP   40U"
.br
.RI "\fIKernel Idle Thread stack size\&. \fP"
.in -1c
.in -1c
.PP
.RI "\fBInterrupt management\fP"
.br
PORT_ISR_\&.\&.\&. macros are used by esKernIsrEnter() and esKernIsrExit() functions\&. They are used to keep the current level of ISR nesting\&. Scheduler should be invoked only from the last ISR that is executing\&. 
.PP
.in +1c
.in +1c
.ti -1c
.RI "#define \fBPORT_INT_DISABLE\fP()"
.br
.RI "\fIDisable all interrupt sources\&. \fP"
.ti -1c
.RI "#define \fBPORT_ISR_ENTER\fP()"
.br
.RI "\fIEnter ISR\&. Increment gPortIsrNesting_ variable to keep track of ISR nesting\&. \fP"
.ti -1c
.RI "#define \fBPORT_ISR_EXIT\fP()"
.br
.RI "\fIExit ISR\&. Decrement gPortIsrNesting_ variable to keep track of ISR nesting\&. \fP"
.ti -1c
.RI "#define \fBPORT_ISR_IS_LAST\fP()   (0U == gPortIsrNesting ? TRUE : FALSE)"
.br
.RI "\fIIf isrNesting variable is zero then the last ISR is executing and scheduler should be invoked\&. \fP"
.in -1c
.in -1c
.PP
.RI "\fBCritical section management\fP"
.br
Disable/enable interrupts by preserving the status of interrupts\&.
.PP
Generally speaking these macros would store the status of the interrupt disable flag in the local variable declared by \fBPORT_CRITICAL_DECL\fP and then disable interrupts\&. Local variable is allocated in all of eSolid RTOS functions that need to disable interrupts\&. Macros would restore the interrupt status by copying back the allocated variable into the CPU's status register\&. 
.PP
.in +1c
.in +1c
.ti -1c
.RI "#define \fBPORT_CRITICAL_DECL\fP()   \fBportReg_T\fP intStatus_"
.br
.RI "\fIDeclare the interrupt status variable\&. \fP"
.ti -1c
.RI "#define \fBPORT_CRITICAL_ENTER\fP()"
.br
.RI "\fIEnter critical section\&. \fP"
.ti -1c
.RI "#define \fBPORT_CRITICAL_EXIT\fP()"
.br
.RI "\fIExit critical section\&. \fP"
.in -1c
.in -1c
.PP
.RI "\fBGeneral port macros\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBPORT_STCK_SIZE\fP(size)"
.br
.RI "\fICalculate the stack size\&. \fP"
.ti -1c
.RI "#define \fBPORT_CRITICAL_EXIT_SLEEP\fP()   portIntSetSleepEnter_(intStatus_)"
.br
.RI "\fIExit critical section and enter sleep state\&. \fP"
.ti -1c
.RI "#define \fBPORT_INIT_EARLY\fP()"
.br
.RI "\fIEarly port initialization\&. \fP"
.ti -1c
.RI "#define \fBPORT_INIT\fP()"
.br
.RI "\fIPort initialization\&. \fP"
.ti -1c
.RI "#define \fBPORT_INIT_LATE\fP()"
.br
.RI "\fILate port initialization\&. \fP"
.ti -1c
.RI "#define \fBPORT_TERM\fP()"
.br
.RI "\fITerminate port\&. \fP"
.in -1c
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef uint8_t \fBportReg_T\fP"
.br
.RI "\fIData type which corresponds to the general purpose register\&. \fP"
.ti -1c
.RI "typedef struct \fBportStck\fP \fBportStck_T\fP"
.br
.RI "\fIStack type\&. \fP"
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBportReg_T\fP \fBgPortIsrNesting_\fP"
.br
.RI "\fIVariable to keep track of ISR nesting\&. \fP"
.ti -1c
.RI "const PORT_C_ROM \fBportReg_T\fP \fBpwr2LKP\fP [\fBPORT_DATA_WIDTH_VAL\fP]"
.br
.RI "\fILook up table for: 2^n expression\&. \fP"
.in -1c
.SS "Scheduler support"

.PP
\fBNote:\fP
.RS 4
These functions are extensively used by the scheduler and therefore they should be optimized for the architecture being used\&. 
.RE
.PP

.in +1c
.ti -1c
.RI "#define \fBPORT_FIND_LAST_SET\fP(val)   \fBportFindLastSet_\fP(val)"
.br
.RI "\fIFind last set bit in a word\&. \fP"
.ti -1c
.RI "#define \fBPORT_PWR2\fP(pwr)   (1U << (pwr))"
.br
.RI "\fIHelper macro: calculate 2^pwr expression\&. \fP"
.ti -1c
.RI "#define \fBPORT_SYSTMR_INIT\fP()"
.br
.RI "\fIInitialize system timer and associated interrupt\&. \fP"
.ti -1c
.RI "#define \fBPORT_SYSTMR_TERM\fP()"
.br
.RI "\fIStop the timer if it is running and disable associated interrupt\&. \fP"
.ti -1c
.RI "#define \fBPORT_SYSTMR_GET_RVAL\fP()"
.br
.RI "\fIGet system timer reload value\&. \fP"
.ti -1c
.RI "#define \fBPORT_SYSTMR_GET_CVAL\fP()"
.br
.RI "\fIGet system timer current value\&. \fP"
.ti -1c
.RI "#define \fBPORT_SYSTMR_RLD\fP(val)"
.br
.RI "\fIReload the system timer with specified number\&. \fP"
.ti -1c
.RI "#define \fBPORT_SYSTMR_ENABLE\fP()"
.br
.RI "\fIEnable the system timer\&. \fP"
.ti -1c
.RI "#define \fBPORT_SYSTMR_DISABLE\fP()"
.br
.RI "\fIDisable the system timer\&. \fP"
.ti -1c
.RI "#define \fBPORT_SYSTMR_ISR_ENABLE\fP()"
.br
.RI "\fIEnable the system timer interrupt\&. \fP"
.ti -1c
.RI "#define \fBPORT_SYSTMR_ISR_DISABLE\fP()"
.br
.RI "\fIDisable the system timer interrupt\&. \fP"
.ti -1c
.RI "uint_fast8_t \fBportFindLastSet_\fP (\fBportReg_T\fP val)"
.br
.RI "\fIFind last set bit in a word\&. \fP"
.in -1c
.SS "Dispatcher context switching"

.in +1c
.ti -1c
.RI "#define \fBPORT_CTX_INIT\fP(stck, stackSize, thread, arg)"
.br
.RI "\fIInitialize the thread context\&. \fP"
.ti -1c
.RI "#define \fBPORT_CTX_SW\fP()"
.br
.RI "\fIDo the context switch - invoked from API level\&. \fP"
.ti -1c
.RI "#define \fBPORT_CTX_SW_ISR\fP()"
.br
.RI "\fIDo the context switch - invoked from ISR level\&. \fP"
.ti -1c
.RI "#define \fBPORT_THD_START\fP()"
.br
.RI "\fIStart the first thread\&. \fP"
.ti -1c
.RI "void * \fBportCtxInit_\fP (void *stck, size_t stckSize, void(*fn)(void *), void *arg)"
.br
.RI "\fIInitialize the thread context\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Interface of CPU port - Template\&. 


.PP
\fBAuthor:\fP
.RS 4
Nenad Radulovic 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for eSolid - Real-Time Kernel from the source code\&.
