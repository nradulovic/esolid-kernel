.TH "scheduler" 3 "Sat Nov 30 2013" "Version 1.0BetaR02" "eSolid - Real-Time Kernel" \" -*- nroff -*-
.ad l
.nh
.SH NAME
scheduler \- Scheduler 
About the scheduler and Ready Threads Queue
.SH "Quantum"
.PP
The period of time for which a thread is allowed to execute in a preemptive multi-threading system is generally called the time slice, or \fCquantum\fP\&. The scheduler is run once every quantum to choose the next thread for execution\&. If the quantum is too short then the scheduler overhead may become high\&.
.PP
An interrupt is used to allow the kernel to switch between threads when their quantum expires, effectively allowing the processor's time to be shared between a number of threads, giving the illusion that it is dealing with these threads concurrently\&.
.SH "Threads List"
.PP
Each thread structure \fBesThd\fP contains Thread List structure \fBesThd::thdL\fP\&. All threads of the same priority are linked together via \fInext\fP and \fIprev\fP members in \fBesThd::thdL\fP structure\&. The first member of the structure is pointer \fIq\fP which points back to the Threads Queue structure (\fBesThdQ\fP) which contains the threads\&.
.PP
The list is organized as \fBcircular doubly linked list\fP, which means that \fItail\fP and \fIhead\fP nodes are linked together just like every other node in the list\&. This provides easy and efficient traversal of the list\&.
.PP
Detailed view of Threads List (sentinel\&.next pointers not shown)Detailed view of Threads List (sentinel\&.next pointers not shown)
.PP
Each sentinel of a list has two pointers, \fIhead\fP and \fInext\fP\&. Pointer sentinel\&.head* always points to the first entry of the list which is called head*\&. Every new thread is added at the \fItail\fP of the list which is essentialy just after the node \fIhead\fP\&. When a first thread is added to the list the pointer sentinel\&.next* points to the thread, too\&. When the list is rotated using function \fBesThdQFetchRotateI()\fP the pointer \fIsentinel\&.next\fP is advanced forward and points to the next thread in list\&.
.PP
Detailed view of the sentinel and linked listDetailed view of the sentinel and linked list
.SH "Threads Queue"
.PP
Based on the number of configured priority levels (see \fBCFG_SCHED_PRIO_LVL\fP) and on the number of data register bits (see \fCPORT_DEF_DATA_WIDTH\fP) of the used CPU, two configurations are possible:
.IP "\(bu" 2
Simple Ready Threads Queue
.IP "\(bu" 2
Complex Ready Threads Queue
.PP
.PP
Simple Ready Threads Queue configuration is used when the number of configured priority levels is lower or equal to the number of bits in general purpose data register\&. For example if application is using 9 priority levels on 32-bit CPU than simple Ready Threads Queue configuration is used\&. In contrast, when using 9 priority levels on an 8-bit CPU than the kernel is forced to use the Complex Ready Threads Queue configuration since 8-bit register cannot carry 9 bits of data\&.
.SS "Simple Ready Threads Queue"
Each bit in \fCbit[0]\fP variable represents one priority level\&. The number of bits used in this variable depends on \fBCFG_SCHED_PRIO_LVL\fP value\&. If a bit at \fCNth\fP position is set then there is a thread inserted in Thread List at \fCNth\fP priority level\&.
.PP

.br
Ready Threads Queue - low number of priority levelsReady Threads Queue - low number of priority levels
.PP
\fBInserting a thread\fP
.RS 4
The process of a thread insertion into a thread queue can be described using the following pseudo-code: 
.PP
.nf
function insert(thread)
    priority := thread\&.priority                             # Get the priority of the thread

    if (grp[priority]\&.head == NULL)                         # If this priority level has a list
        grp[priority]\&.head := thread                        # Create a list with this thread as head
        grp[priority]\&.next := thread
        bitIndx := 2^priority                               # bitIndx equals to 2 raised to the power of priority
        bit[0]  := bit[0] or bitIndx                        # Set the calculated bit in Bit Map
    else
        listInsertAtTail(grp[priority]\&.head, thread)        # Add thread at tail of existing list
    end if
end function

.fi
.PP
.RE
.PP
\fBRemoving a thread\fP
.RS 4
The process of a thread removal can be described with the following pseudo-code: 
.PP
.nf
function remove(thread)
    priority := thread\&.priority                             # Get the priority of the thread

    if (listIsEntryLast(thread))                            # In case we are removing the last entry
        grp[priority]\&.head := NULL                          # List is deleted
        bitIndx := 2^priority                               # bitIndx equals to 2 raised to the power of priority
        bit[0]  := bit[0] and not bitIndx                   # Clear the calculated bit in Bit Map
    else
        listRemove(thread)                                  # Remove the thread from list
    end if
end function

.fi
.PP
.RE
.PP
\fBFetching the highest priority thread\fP
.RS 4
The process of fetching the highest priority thread is inverse function of \fC2^priority\fP which was used in \fCinsert()\fP function: 
.PP
.nf
function fetch()
    priority := log2(bit[0])                                # Find Last Set bit position in bit[0]

    return grp[priority]
end function

.fi
.PP
.RE
.PP
\fBRotating the threads queue\fP
.RS 4
The process can be described with the following algorithm: 
.PP
.nf
function rotate()
    priority := log2(bit[0])                                # Find Last Set bit position in bit[0]

    grp[priority]\&.next := grp[priority]\&.next\&.next

    return grp[priority]\&.next
end function

.fi
.PP
 
.RE
.PP
.SS "Complex Ready Threads Queue"
Ready Threads Queue - high number of priority levelsReady Threads Queue - high number of priority levels
.SH "Ready Threads Queue"
.PP
Ready Threads Queue holds threads that are ready for execution\&. 
