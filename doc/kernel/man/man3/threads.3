.TH "threads" 3 "Tue Oct 29 2013" "Version 1.0BetaR01" "eSolid - Real-Time Kernel" \" -*- nroff -*-
.ad l
.nh
.SH NAME
threads \- Thread Management 
Introduction to threads and how to use them
.PP

.br

.br

.br
.SH "Intro"
.PP
A thread, also called a thread of execution is the smallest sequence of program instructions that can be managed by an operating system scheduler\&. Multi-threading is implemented by time-division multiplexing where the processor switches between threads\&. Context switching occurs fast enough that the user perceives the threads as running at the same time\&. By using threads a programmer can split the work into the threads, each responsible for a smaller portion of the problem\&. From a threads view he thinks it has the processor all to itself\&.
.SS "eSolid RT Kernel thread"
eSolid RT Kernel supports multi-threading and allows applications to have any number of threads\&. The only limiting factors for the maximum number of threads are the amount of RAM and ROM memory and processing time\&.
.PP
Threads are implemented as normal \fCC\fP functions\&. Thread functions must have the following prototype:
.PP
.PP
.nf
void fn (void *);
.fi
.PP
.PP
Which in plain english means: \fIfn is a function (pointer to void) returning void\fP\&.
.SS "Thread states"
A thread can be in one of the following states:  
.PP
\fBInactive\fP
.RS 4
This is thread initial state\&. Threads in this state are still not activated (\fBinactive\fP) by \fBesThdInit()\fP function or they were deleted by \fBesThdTerm()\fP function\&. The scheduler does not recognize these threads and they will never execute\&.
.RE
.PP
\fBReady\fP
.RS 4
Threads waiting to execute\&. There are the threads that are \fBready\fP to execute but are not currently executing because a different thread (equal or higher priority) is already executing\&.
.RE
.PP
\fBRun\fP
.RS 4
Thread is currently executing\&. When the thread is in this state then the code is actually being \fBrun\fP on the processor\&.
.RE
.PP
\fBSleep\fP
.RS 4
Thread is sleeping\&. These threads are \fBsleeping\fP while waiting for an event to occur\&.
.RE
.PP
.SH "Initializing Threads"
.PP
.SS "esThdInit() API function"
Threads are initialized by using \fBesThdInit()\fP API function\&.
.PP
\fBStack size\fP
.RS 4

.RE
.PP
There is no easy way to determine the stack size required by a thread\&. It is possible to calculate approximate stack size for simple threads, but for more complex ones (e\&.g\&. which calls library API function) this can be a daunting task\&. In this case stack size will be set to a size more than adequate for the thread and then use the profiling features provided by the kernel to ensure both that the space allocated is adequate, and that RAM space is not being unnecessarily wasted\&. 
