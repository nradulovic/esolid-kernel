.TH "CPU port interface" 3 "Tue Oct 29 2013" "Version 1.0BetaR01" "eSolid - Real-Time Kernel" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CPU port interface \- 
.PP
CPU port macros and functions\&.  

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBportStck\fP"
.br
.RI "\fIStack structure used for stack declaration in order to force the alignment Alignment of stack structure\&. \fP"
.ti -1c
.RI "struct \fBportCtx\fP"
.br
.RI "\fIPort context structure\&. \fP"
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef uint8_t \fBportReg_T\fP"
.br
.RI "\fIData type which corresponds to the general purpose register\&. \fP"
.ti -1c
.RI "typedef struct \fBportStck\fP \fBportStck_T\fP"
.br
.RI "\fIStack type\&. \fP"
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBportReg_T\fP \fBgPortIsrNesting_\fP"
.br
.RI "\fIVariable to keep track of ISR nesting\&. \fP"
.ti -1c
.RI "const PORT_C_ROM \fBportReg_T\fP \fBpwr2LKP\fP [\fBPORT_DATA_WIDTH_VAL\fP]"
.br
.RI "\fILook up table for: 2^n expression\&. \fP"
.in -1c
.SS "Port constants"

.in +1c
.ti -1c
.RI "#define \fBPORT_DATA_WIDTH_VAL\fP   8U"
.br
.RI "\fIThis macro specifies the bit width of CPU data registers\&. \fP"
.ti -1c
.RI "#define \fBPORT_STCK_MINSIZE_VAL\fP   (sizeof(struct \fBportCtx\fP) / sizeof(\fBportReg_T\fP))"
.br
.RI "\fIThis macro specifies the minimal size of the thread stack\&. \fP"
.ti -1c
.RI "#define \fBPORT_SYSTMR_ONE_TICK_VAL\fP   (\fBCFG_SYSTMR_CLOCK_FREQUENCY\fP / \fBCFG_SYSTMR_EVENT_FREQUENCY\fP)"
.br
.RI "\fISystem timer reload value for one tick\&. \fP"
.ti -1c
.RI "#define \fBPORT_SYSTMR_MAX_VAL\fP   0xFFU"
.br
.RI "\fISystem timer maximum value\&. \fP"
.ti -1c
.RI "#define \fBPORT_SYSTMR_MAX_TICKS_VAL\fP   (\fBPORT_SYSTMR_MAX_VAL\fP / PORT_SYSTMR_RELOAD_VAL)"
.br
.RI "\fIMaximum number of ticks the system timer can accept\&. \fP"
.ti -1c
.RI "#define \fBPORT_KVTMR_STCK_SIZE\fP   40U"
.br
.RI "\fIKernel Virtual Timer Thread stack size\&. \fP"
.ti -1c
.RI "#define \fBPORT_KIDLE_STCK_SIZE\fP   40U"
.br
.RI "\fIKernel Idle Thread stack size\&. \fP"
.in -1c
.SS "Interrupt management"
PORT_ISR_\&.\&.\&. macros are used by esKernIsrEnter() and esKernIsrExit() functions\&. They are used to keep the current level of ISR nesting\&. Scheduler should be invoked only from the last ISR that is executing\&. 
.in +1c
.ti -1c
.RI "#define \fBPORT_INT_DISABLE\fP()"
.br
.RI "\fIDisable all interrupt sources\&. \fP"
.ti -1c
.RI "#define \fBPORT_ISR_ENTER\fP()"
.br
.RI "\fIEnter ISR\&. Increment gPortIsrNesting_ variable to keep track of ISR nesting\&. \fP"
.ti -1c
.RI "#define \fBPORT_ISR_EXIT\fP()"
.br
.RI "\fIExit ISR\&. Decrement gPortIsrNesting_ variable to keep track of ISR nesting\&. \fP"
.ti -1c
.RI "#define \fBPORT_ISR_IS_LAST\fP()   (0U == gPortIsrNesting ? TRUE : FALSE)"
.br
.RI "\fIIf isrNesting variable is zero then the last ISR is executing and scheduler should be invoked\&. \fP"
.in -1c
.SS "Critical section management"
Disable/enable interrupts by preserving the status of interrupts\&.
.PP
Generally speaking these macros would store the status of the interrupt disable flag in the local variable declared by \fBPORT_CRITICAL_DECL\fP and then disable interrupts\&. Local variable is allocated in all of eSolid RTOS functions that need to disable interrupts\&. Macros would restore the interrupt status by copying back the allocated variable into the CPU's status register\&. 
.in +1c
.ti -1c
.RI "#define \fBPORT_CRITICAL_DECL\fP()   \fBportReg_T\fP intStatus_"
.br
.RI "\fIDeclare the interrupt status variable\&. \fP"
.ti -1c
.RI "#define \fBPORT_CRITICAL_ENTER\fP()"
.br
.RI "\fIEnter critical section\&. \fP"
.ti -1c
.RI "#define \fBPORT_CRITICAL_EXIT\fP()"
.br
.RI "\fIExit critical section\&. \fP"
.in -1c
.SS "Scheduler support"

.PP
\fBNote:\fP
.RS 4
These functions are extensively used by the scheduler and therefore they should be optimized for the architecture being used\&. 
.RE
.PP

.in +1c
.ti -1c
.RI "uint_fast8_t \fBportFindLastSet_\fP (\fBportReg_T\fP val)"
.br
.RI "\fIFind last set bit in a word\&. \fP"
.ti -1c
.RI "#define \fBPORT_FIND_LAST_SET\fP(val)   \fBportFindLastSet_\fP(val)"
.br
.RI "\fIFind last set bit in a word\&. \fP"
.ti -1c
.RI "#define \fBPORT_PWR2\fP(pwr)   (1U << (pwr))"
.br
.RI "\fIHelper macro: calculate 2^pwr expression\&. \fP"
.ti -1c
.RI "#define \fBPORT_SYSTMR_INIT\fP()"
.br
.RI "\fIInitialize system timer and associated interrupt\&. \fP"
.ti -1c
.RI "#define \fBPORT_SYSTMR_TERM\fP()"
.br
.RI "\fIStop the timer if it is running and disable associated interrupt\&. \fP"
.ti -1c
.RI "#define \fBPORT_SYSTMR_GET_RVAL\fP()"
.br
.RI "\fIGet system timer reload value\&. \fP"
.ti -1c
.RI "#define \fBPORT_SYSTMR_GET_CVAL\fP()"
.br
.RI "\fIGet system timer current value\&. \fP"
.ti -1c
.RI "#define \fBPORT_SYSTMR_RLD\fP(val)"
.br
.RI "\fIReload the system timer with specified number\&. \fP"
.ti -1c
.RI "#define \fBPORT_SYSTMR_ENABLE\fP()"
.br
.RI "\fIEnable the system timer\&. \fP"
.ti -1c
.RI "#define \fBPORT_SYSTMR_DISABLE\fP()"
.br
.RI "\fIDisable the system timer\&. \fP"
.ti -1c
.RI "#define \fBPORT_SYSTMR_ISR_ENABLE\fP()"
.br
.RI "\fIEnable the system timer interrupt\&. \fP"
.ti -1c
.RI "#define \fBPORT_SYSTMR_ISR_DISABLE\fP()"
.br
.RI "\fIDisable the system timer interrupt\&. \fP"
.in -1c
.SS "Dispatcher context switching"

.in +1c
.ti -1c
.RI "void * \fBportCtxInit_\fP (void *stck, size_t stckSize, void(*fn)(void *), void *arg)"
.br
.RI "\fIInitialize the thread context\&. \fP"
.ti -1c
.RI "#define \fBPORT_CTX_INIT\fP(stck, stackSize, thread, arg)"
.br
.RI "\fIInitialize the thread context\&. \fP"
.ti -1c
.RI "#define \fBPORT_CTX_SW\fP()"
.br
.RI "\fIDo the context switch - invoked from API level\&. \fP"
.ti -1c
.RI "#define \fBPORT_CTX_SW_ISR\fP()"
.br
.RI "\fIDo the context switch - invoked from ISR level\&. \fP"
.ti -1c
.RI "#define \fBPORT_THD_START\fP()"
.br
.RI "\fIStart the first thread\&. \fP"
.in -1c
.SS "General port macros"

.in +1c
.ti -1c
.RI "#define \fBPORT_STCK_SIZE\fP(size)"
.br
.RI "\fICalculate the stack size\&. \fP"
.ti -1c
.RI "#define \fBPORT_CRITICAL_EXIT_SLEEP\fP()   portIntSetSleepEnter_(intStatus_)"
.br
.RI "\fIExit critical section and enter sleep state\&. \fP"
.ti -1c
.RI "#define \fBPORT_INIT_EARLY\fP()"
.br
.RI "\fIEarly port initialization\&. \fP"
.ti -1c
.RI "#define \fBPORT_INIT\fP()"
.br
.RI "\fIPort initialization\&. \fP"
.ti -1c
.RI "#define \fBPORT_INIT_LATE\fP()"
.br
.RI "\fILate port initialization\&. \fP"
.ti -1c
.RI "#define \fBPORT_TERM\fP()"
.br
.RI "\fITerminate port\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
CPU port macros and functions\&. 

Since this header file is included with the API of the kernel a few naming conventions are defined in order to avoid name clashing with the names of objects from libraries included by application code\&.
.PP
\fB1) Macro naming conventions\fP
.RS 4
For macro naming try to follow these rules:
.IP "\(bu" 2
All standard PORT API macro names are prefixed with: \fB\fCPORT_\fP\&.\fP 
.IP "\(bu" 2
All other macros which are specific to the port used are prefixed with: \fB\fCCPU_\fP\&.\fP 
.PP
.RE
.PP
\fB2) Type declaration naming conventions\fP
.RS 4
For type declaration naming try to follow these rules:
.IP "\(bu" 2
All type declaration names are prefixed with: \fB\fCcpu\fP\&.\fP 
.PP
.RE
.PP
\fB3) Global variable naming conventions\fP
.RS 4
For global variable naming try to follow these rules:
.IP "\(bu" 2
All global variable names are prefixed with: \fB\fCcpu\fP\&.\fP 
.PP
.RE
.PP
\fB4) Funcion naming convetions\fP
.RS 4
For functions naming try to follow these rules:
.IP "\(bu" 2
All function names are prefixed with: \fB\fCport\fP\fP and postfixed with: \fB\fC_\fP \fP(underscore)\&.
.IP "\(bu" 2
All other functions which are specific to the port used are prefixed with: \fB\fCcpu\fP\fP and postfixed with: \fB\fC_\fP \fP(underscore)\&.
.IP "\(bu" 2
The \fCexception\fP to above two rules are the names of functions used for Interrupt Service Routines\&. They can have any name required by port\&. 
.PP
.RE
.PP

.SH "Macro Definition Documentation"
.PP 
.SS "#define PORT_DATA_WIDTH_VAL   8U"

.PP
This macro specifies the bit width of CPU data registers\&. 
.SS "#define PORT_STCK_MINSIZE_VAL   (sizeof(struct \fBportCtx\fP) / sizeof(\fBportReg_T\fP))"

.PP
This macro specifies the minimal size of the thread stack\&. Generally minimal stack size is equal to the size of context structure 
.SS "#define PORT_SYSTMR_ONE_TICK_VAL   (\fBCFG_SYSTMR_CLOCK_FREQUENCY\fP / \fBCFG_SYSTMR_EVENT_FREQUENCY\fP)"

.PP
System timer reload value for one tick\&. This is a calculated value for one system tick period 
.SS "#define PORT_SYSTMR_MAX_VAL   0xFFU"

.PP
System timer maximum value\&. This macro specifies maximum value that can be reloaded into system timer counter\&. For example, if the system timer is a 8-bit counter than this macro would have the value of 0xFFU\&. 
.SS "#define PORT_SYSTMR_MAX_TICKS_VAL   (\fBPORT_SYSTMR_MAX_VAL\fP / PORT_SYSTMR_RELOAD_VAL)"

.PP
Maximum number of ticks the system timer can accept\&. 
.SS "#define PORT_KVTMR_STCK_SIZE   40U"

.PP
Kernel Virtual Timer Thread stack size\&. 
.SS "#define PORT_KIDLE_STCK_SIZE   40U"

.PP
Kernel Idle Thread stack size\&. 
.SS "#define PORT_INT_DISABLE()"

.PP
Disable all interrupt sources\&. 
.SS "#define PORT_ISR_ENTER()"
\fBValue:\fP
.PP
.nf
do {                                                                        \\
        gPortIsrNesting_++;                                                     \\
        esKernIsrPrologueI();                                                   \
    } while (0U)
.fi
.PP
Enter ISR\&. Increment gPortIsrNesting_ variable to keep track of ISR nesting\&. Variable gPortIsrNesting_ is needed only if the port does not support any other method of detecting when the last ISR is executing\&. 
.SS "#define PORT_ISR_EXIT()"
\fBValue:\fP
.PP
.nf
do {                                                                        \\
        gPortIsrNesting_--;                                                     \\
        esKernIsrEpilogueI();                                                   \
    } while (0U)
.fi
.PP
Exit ISR\&. Decrement gPortIsrNesting_ variable to keep track of ISR nesting\&. Variable gPortIsrNesting_ is needed only if the port does not support any other method of detecting when the last ISR is executing\&. 
.SS "#define PORT_ISR_IS_LAST()   (0U == gPortIsrNesting ? TRUE : FALSE)"

.PP
If isrNesting variable is zero then the last ISR is executing and scheduler should be invoked\&. 
.PP
\fBReturns:\fP
.RS 4
Is the currently executed ISR the last one? 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fITRUE\fP - this is last ISR 
.br
\fIFALSE\fP - this is not the last ISR 
.RE
.PP

.SS "#define PORT_CRITICAL_DECL()   \fBportReg_T\fP intStatus_"

.PP
Declare the interrupt status variable\&. This variable is used to store the current state of enabled ISRs\&. 
.SS "#define PORT_CRITICAL_ENTER()"

.PP
Enter critical section\&. 
.SS "#define PORT_CRITICAL_EXIT()"

.PP
Exit critical section\&. 
.SS "#define PORT_FIND_LAST_SET(val)   \fBportFindLastSet_\fP(val)"

.PP
Find last set bit in a word\&. This function is used by the scheduler to efficiently determine the highest priority of thread ready for execution\&. For algorithm details see: http://en.wikipedia.org/wiki/Find_first_set\&. 
.PP
\fBReturns:\fP
.RS 4
The position of the last set bit in a word 
.RE
.PP

.SS "#define PORT_PWR2(pwr)   (1U << (pwr))"

.PP
Helper macro: calculate 2^pwr expression\&. Some ports may want to use look up tables instead of shifting operation 
.SS "#define PORT_SYSTMR_INIT()"

.PP
Initialize system timer and associated interrupt\&. This macro will only initialize system timer and associated interrupt\&. The macro is called from \fBesKernStart()\fP function\&. Responsibility:
.IP "\(bu" 2
initialize system timer
.IP "\(bu" 2
initialize system timer interrupt 
.PP
\fBNote:\fP
.RS 4
This macro MUST NOT enable system timer events\&. System timer events are enabled/disabled by \fBPORT_SYSTMR_ISR_ENABLE()\fP and \fBPORT_SYSTMR_ISR_DISABLE()\fP macros\&. 
.RE
.PP

.PP

.SS "#define PORT_SYSTMR_TERM()"

.PP
Stop the timer if it is running and disable associated interrupt\&. Responsibility:
.IP "\(bu" 2
disable system timer interrupt
.IP "\(bu" 2
stop and disable system timer 
.PP

.SS "#define PORT_SYSTMR_GET_RVAL()"

.PP
Get system timer reload value\&. 
.SS "#define PORT_SYSTMR_GET_CVAL()"

.PP
Get system timer current value\&. 
.SS "#define PORT_SYSTMR_RLD(val)"

.PP
Reload the system timer with specified number\&. Responsibility:
.IP "\(bu" 2
stop the system timer
.IP "\(bu" 2
reload the system timer
.IP "\(bu" 2
start the system timer 
.PP

.SS "#define PORT_SYSTMR_ENABLE()"

.PP
Enable the system timer\&. Responsibility:
.IP "\(bu" 2
enable (run) the system timer counter 
.PP

.SS "#define PORT_SYSTMR_DISABLE()"

.PP
Disable the system timer\&. Responsibility:
.IP "\(bu" 2
disable (stop) the system timer counter 
.PP

.SS "#define PORT_SYSTMR_ISR_ENABLE()"

.PP
Enable the system timer interrupt\&. Responsibility:
.IP "\(bu" 2
allow system timer interrupt to occur 
.PP

.SS "#define PORT_SYSTMR_ISR_DISABLE()"

.PP
Disable the system timer interrupt\&. Responsibility:
.IP "\(bu" 2
disallow system timer interrupt to occur 
.PP

.SS "#define PORT_CTX_INIT(stck, stackSize, thread, arg)"

.PP
Initialize the thread context\&. 
.PP
\fBParameters:\fP
.RS 4
\fIstck\fP Pointer to the allocated thread stck\&. The pointer points to the beginning of the memory as defined per C language\&. It's up to port function to adjust the pointer according to the stck type: full descending or full ascending one\&. 
.br
\fIstackSize\fP The size of allocated stck in bytes\&. 
.br
\fIthread\fP Pointer to the thread function\&. 
.br
\fIarg\fP Argument that will be passed to thread function at the starting of execution\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The new top of stck after thread context initialization\&. 
.RE
.PP

.SS "#define PORT_CTX_SW()"

.PP
Do the context switch - invoked from API level\&. 
.SS "#define PORT_CTX_SW_ISR()"

.PP
Do the context switch - invoked from ISR level\&. 
.SS "#define PORT_THD_START()"

.PP
Start the first thread\&. 
.SS "#define PORT_STCK_SIZE(size)"
\fBValue:\fP
.PP
.nf
((((size + PORT_STCK_MINSIZE_VAL) + (sizeof(struct portStck) /                  \
    sizeof(portReg_T))) - 1U) / (sizeof(struct portStck)/sizeof(portReg_T)))
.fi
.PP
Calculate the stack size\&. This macro is used when specifying the size of thread stack\&. Responsibility:
.IP "\(bu" 2
add to \fCsize\fP the minimal stack size specified by \fBPORT_STCK_MINSIZE_VAL\fP\&.
.IP "\(bu" 2
if it is needed by the port make sure the alignment is correct\&. 
.PP

.SS "#define PORT_CRITICAL_EXIT_SLEEP()   portIntSetSleepEnter_(intStatus_)"

.PP
Exit critical section and enter sleep state\&. 
.SS "#define PORT_INIT_EARLY()"

.PP
Early port initialization\&. This macro will be called at early initialization stage from \fBesKernInit()\fP function\&. It is called before any kernel data initialization\&. Usually this macro would be used to setup memory space, fill the memory with debug value or something similar\&. 
.SS "#define PORT_INIT()"

.PP
Port initialization\&. This macro will be called after kernel data structure initialization from \fBesKernInit()\fP function\&. 
.SS "#define PORT_INIT_LATE()"

.PP
Late port initialization\&. This macro will be called just a moment before the multitasking is started\&. The macro is called from \fBesKernStart()\fP function\&. 
.SS "#define PORT_TERM()"

.PP
Terminate port\&. This macro will be called when there is a need to stop any further execution (example: an error occured and CPU needs to stop)\&. 
.SH "Typedef Documentation"
.PP 
.SS "typedef uint8_t \fBportReg_T\fP"

.PP
Data type which corresponds to the general purpose register\&. 
.SS "typedef struct \fBportStck\fP \fBportStck_T\fP"

.PP
Stack type\&. 
.SH "Function Documentation"
.PP 
.SS "uint_fast8_t portFindLastSet_ (\fBportReg_T\fPval)"

.PP
Find last set bit in a word\&. 
.PP
\fBParameters:\fP
.RS 4
\fIval\fP Value which needs to be evaluated
.RE
.PP
This function is used by the scheduler to efficiently determine the highest priority of thread ready for execution\&. For algorithm details see: http://en.wikipedia.org/wiki/Find_first_set\&. 
.PP
\fBReturns:\fP
.RS 4
The position of the last set bit in a word 
.RE
.PP

.SS "void* portCtxInit_ (void *stck, size_tstckSize, void(*)(void *)fn, void *arg)"

.PP
Initialize the thread context\&. 
.PP
\fBParameters:\fP
.RS 4
\fIstck\fP Pointer to the allocated thread stck\&. The pointer points to the beginning of the memory as defined per C language\&. It's up to port function to adjust the pointer according to the stck type: full descending or full ascending one\&. 
.br
\fIstckSize\fP The size of allocated stck in bytes\&. 
.br
\fIfn\fP Pointer to the thread function\&. 
.br
\fIarg\fP Argument that will be passed to thread function at the starting of execution\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The new top of stck after thread context initialization\&. 
.RE
.PP

.SH "Variable Documentation"
.PP 
.SS "\fBportReg_T\fP gPortIsrNesting_"

.PP
Variable to keep track of ISR nesting\&. 
.SS "const PORT_C_ROM \fBportReg_T\fP pwr2LKP[\fBPORT_DATA_WIDTH_VAL\fP]"

.PP
Look up table for: 2^n expression\&. This look up table can be used to accelerate the Logical Shift Left operations which are needed to set bits inside the priority bit map\&. In plain C this operation would be written as: \fC(1U << n)\fP, but in many 8-bit CPUs this operation can be lengthy\&. If there is a need for faster operation than this table can be used instead of the mentioned C code\&.
.PP
To use the look up table change \fBPORT_PWR2\fP macro implementation from: \fC(1U << (pwr))\fP to \fCpwr2LKP[pwr]\fP 
.SH "Author"
.PP 
Generated automatically by Doxygen for eSolid - Real-Time Kernel from the source code\&.
