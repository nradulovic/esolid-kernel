.TH "dbg.h" 3 "Sat Nov 23 2013" "Version 1.0BetaR02" "eSolid - Real-Time Kernel" \" -*- nroff -*-
.ad l
.nh
.SH NAME
dbg.h \- 
.PP
Debug basic functionality\&.  

.SH SYNOPSIS
.br
.PP
\fC#include 'arch/compiler\&.h'\fP
.br
\fC#include 'kernel/dbg_cfg\&.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBdbgCobj_\fP"
.br
.RI "\fIDebug C object information structure\&. \fP"
.ti -1c
.RI "struct \fBdbgCobj_::dbgModInfo_\fP"
.br
.RI "\fIDebug module information structure\&. \fP"
.ti -1c
.RI "struct \fBesDbgReport\fP"
.br
.RI "\fIDebug report structure\&. \fP"
.in -1c
.SS "Macros"

.PP
.RI "\fBInternal checking\fP"
.br
These macros are enabled/disabled using the option \fBCFG_DBG_INTERNAL_CHECK\fP\&. 
.PP
.in +1c
.in +1c
.ti -1c
.RI "#define \fBES_DBG_INTERNAL\fP(msg, expr)   (void)0"
.br
.RI "\fIAssert macro used for internal execution checking\&. \fP"
.in -1c
.in -1c
.PP
.RI "\fBAPI contract validation\fP"
.br
These macros are enabled/disabled using the option \fBCFG_DBG_API_VALIDATION\fP\&. 
.PP
.in +1c
.in +1c
.ti -1c
.RI "#define \fBES_DBG_API_OBLIGATION\fP(expr)   (void)0"
.br
.RI "\fIExecute code to fulfill the contract\&. \fP"
.ti -1c
.RI "#define \fBES_DBG_API_REQUIRE\fP(msg, expr)   (void)0"
.br
.RI "\fIMake sure the caller has fulfilled all contract preconditions\&. \fP"
.ti -1c
.RI "#define \fBES_DBG_API_ENSURE\fP(msg, expr)   (void)0"
.br
.RI "\fIMake sure the callee has fulfilled all contract postconditions\&. \fP"
.in -1c
.in -1c
.SS "Functions"

.PP
.RI "\fBDebug hook functions\fP"
.br

.PP
\fBNote:\fP
.RS 4
1) The definition of this functions must be written by the user\&. 
.RE
.PP

.PP
.in +1c
.in +1c
.ti -1c
.RI "void \fBuserAssert\fP (const struct \fBesDbgReport\fP *dbgReport)"
.br
.RI "\fIAn assertion has failed\&. This function should inform the user about failed assertion\&. \fP"
.in -1c
.in -1c
.SS "Object and error source information"

.in +1c
.ti -1c
.RI "#define \fBDECL_MODULE_INFO\fP(modName, modDesc, modAuth)   PORT_C_UNUSED DECL_MODULE_INFO(modName, modDesc, modAuth)"
.br
.RI "\fIDeclare a module information card\&. \fP"
.ti -1c
.RI "enum \fBesDbgMsgNum\fP { \fBES_DBG_OUT_OF_RANGE\fP, \fBES_DBG_OBJECT_NOT_VALID\fP, \fBES_DBG_POINTER_NULL\fP, \fBES_DBG_USAGE_FAILURE\fP, \fBES_DBG_NOT_ENOUGH_MEM\fP, \fBES_DBG_NOT_IMPLEMENTED\fP, \fBES_DBG_UNKNOWN_ERROR\fP }"
.br
.RI "\fIDebug messages\&. \fP"
.in -1c
.SS "Error checking"
For more details see \fBDebug: Error checking\fP\&. 
.in +1c
.ti -1c
.RI "#define \fBES_DBG_STATIC_ASSERT\fP(msg, expr)   extern char ES_DBG_STATIC_ASSERT_has_failed_##msg[(expr) ? 1 : -1]"
.br
.RI "\fIStatic assert macro\&. \fP"
.ti -1c
.RI "#define \fBES_DBG_ASSERT\fP(msg, expr)   (void)0"
.br
.RI "\fIGeneric assert macro\&. \fP"
.ti -1c
.RI "#define \fBES_DBG_ASSERT_ALWAYS\fP(msg, text)   (void)0"
.br
.RI "\fIAssert macro that will always execute (no conditional)\&. \fP"
.ti -1c
.RI "PORT_C_NORETURN void \fBdbgAssert\fP (const PORT_C_ROM struct \fBdbgCobj_\fP *cObj, const PORT_C_ROM char *expr, enum \fBesDbgMsgNum\fP msg)"
.br
.RI "\fIAn assertion has failed\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Debug basic functionality\&. 


.PP
\fBAuthor:\fP
.RS 4
Nenad Radulovic 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for eSolid - Real-Time Kernel from the source code\&.
