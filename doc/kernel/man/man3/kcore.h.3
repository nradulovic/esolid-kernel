.TH "kcore.h" 3 "Sat Nov 30 2013" "Version 1.0BetaR02" "eSolid - Real-Time Kernel" \" -*- nroff -*-
.ad l
.nh
.SH NAME
kcore.h \- 
.PP
Interface of CPU port - Template\&.  

.SH SYNOPSIS
.br
.PP
\fC#include 'arch/compiler\&.h'\fP
.br
\fC#include 'arch/cpu_cfg\&.h'\fP
.br
\fC#include 'kernel_cfg\&.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBportStck\fP"
.br
.RI "\fIStack structure used for stack declaration in order to force the alignment Alignment of stack structure\&. \fP"
.ti -1c
.RI "struct \fBportCtx\fP"
.br
.RI "\fIPort context structure\&. \fP"
.in -1c
.SS "Macros"

.PP
.RI "\fBPort constants\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBPORT_DEF_STCK_MINSIZE\fP   (sizeof(struct \fBportCtx\fP) / sizeof(portReg_T))"
.br
.RI "\fIThis macro specifies the minimal size of the thread stack\&. \fP"
.in -1c
.in -1c
.PP
.RI "\fBSystem timer constants\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBPORT_DEF_SYSTMR_WAKEUP_TH_VAL\fP   600u"
.br
.RI "\fIThreshold system timer value for new tick\&. \fP"
.in -1c
.in -1c
.PP
.RI "\fBKernel threads port dependent settings\fP"
.br
Kernel uses several threads for system management\&. This section defines port dependent settings for the threads\&. 
.PP
.in +1c
.in +1c
.ti -1c
.RI "#define \fBPORT_DEF_KVTMR_STCK_SIZE\fP   40u"
.br
.RI "\fIKernel Virtual Timer Thread stack size\&. \fP"
.ti -1c
.RI "#define \fBPORT_DEF_KIDLE_STCK_SIZE\fP   40u"
.br
.RI "\fIKernel Idle Thread stack size\&. \fP"
.in -1c
.in -1c
.PP
.RI "\fBInterrupt management\fP"
.br
PORT_ISR_\&.\&.\&. macros are used by esKernIsrEnter() and esKernIsrExit() functions\&. They are used to keep the current level of ISR nesting\&. Scheduler should be invoked only from the last ISR that is executing\&. 
.PP
.in +1c
.in +1c
.ti -1c
.RI "#define \fBPORT_ISR_ENTER\fP()"
.br
.RI "\fIEnter ISR\&. Increment PortIsrNesting variable to keep track of ISR nesting\&. \fP"
.ti -1c
.RI "#define \fBPORT_ISR_EXIT\fP()"
.br
.RI "\fIExit ISR\&. Decrement PortIsrNesting variable to keep track of ISR nesting\&. \fP"
.ti -1c
.RI "#define \fBPORT_ISR_IS_LAST\fP()   (0u == PortIsrNesting ? TRUE : FALSE)"
.br
.RI "\fIIf isrNesting variable is zero then the last ISR is executing and scheduler should be invoked\&. \fP"
.in -1c
.in -1c
.PP
.RI "\fBGeneral port macros\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBPORT_KCORE_INIT_EARLY\fP()"
.br
.RI "\fIEarly port initialization\&. \fP"
.ti -1c
.RI "#define \fBPORT_KCORE_INIT\fP()"
.br
.RI "\fIPort initialization\&. \fP"
.ti -1c
.RI "#define \fBPORT_KCORE_INIT_LATE\fP()"
.br
.RI "\fILate port initialization\&. \fP"
.ti -1c
.RI "#define \fBPORT_KCORE_TERM\fP()"
.br
.RI "\fITerminate port\&. \fP"
.ti -1c
.RI "#define \fBPORT_STCK_SIZE\fP(size)   (size + \fBPORT_DEF_STCK_MINSIZE\fP)"
.br
.RI "\fICalculate the stack size\&. \fP"
.ti -1c
.RI "#define \fBPORT_CRITICAL_EXIT_SLEEP\fP()   portIntSetSleepEnter_(intStatus_)"
.br
.RI "\fIExit critical section and enter sleep state\&. \fP"
.in -1c
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fBportStck\fP \fBportStck_T\fP"
.br
.RI "\fIStack type\&. \fP"
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "portReg_T \fBPortIsrNesting\fP"
.br
.RI "\fIVariable to keep track of ISR nesting\&. \fP"
.in -1c
.SS "Dispatcher context switching"

.in +1c
.ti -1c
.RI "#define \fBPORT_CTX_INIT\fP(stck, stackSize, thread, arg)"
.br
.RI "\fIInitialize the thread context\&. \fP"
.ti -1c
.RI "#define \fBPORT_CTX_SW\fP()"
.br
.RI "\fIDo the context switch - invoked from API level\&. \fP"
.ti -1c
.RI "#define \fBPORT_CTX_SW_ISR\fP()"
.br
.RI "\fIDo the context switch - invoked from ISR level\&. \fP"
.ti -1c
.RI "#define \fBPORT_CTX_SW_START\fP()"
.br
.RI "\fIStart the first thread\&. \fP"
.ti -1c
.RI "void * \fBportCtxInit\fP (void *stck, size_t stckSize, void(*fn)(void *), void *arg)"
.br
.RI "\fIInitialize the thread context\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Interface of CPU port - Template\&. 


.PP
\fBAuthor:\fP
.RS 4
Nenad Radulovic 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for eSolid - Real-Time Kernel from the source code\&.
