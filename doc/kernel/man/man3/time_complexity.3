.TH "time_complexity" 3 "Sat Nov 30 2013" "Version 1.0BetaR02" "eSolid - Real-Time Kernel" \" -*- nroff -*-
.ad l
.nh
.SH NAME
time_complexity \- Time complexity 
About time categories of algorithms
.SH "Intro"
.PP
In computer science, the time complexity of an algorithm quantifies the amount of time taken by an algorithm to run as a function of the length of the input\&. The time complexity of an algorithm is commonly expressed using \fBbig O\fP notation, which excludes coefficients and lower order terms\&. When expressed this way, the time complexity is said to be described asymptotically, i\&.e\&., as the input size goes to infinity\&. For example, if the time required by an algorithm on all inputs of size \fCn\fP is at most \fC5n^3 + 3n\fP, the asymptotic time complexity is \fCO(n^3)\fP\&.
.PP
Time complexity is commonly estimated by counting the number of elementary operations performed by the algorithm, where an elementary operation takes a fixed amount of time to perform\&. Thus the amount of time taken and the number of elementary operations performed by the algorithm differ by at most a constant factor\&.
.PP
Since an algorithm’s performance time may vary with different inputs of the same size, one commonly uses the worst-case time complexity of an algorithm, denoted as \fBT(n)\fP, which is defined as the maximum amount of time taken on any input of size \fCn\fP\&. Time complexities are classified by the nature of the function \fCT(n)\fP\&. For instance, an algorithm with \fCT(n) = O(n)\fP is called a linear time algorithm, and an algorithm with \fCT(n) = O(2^n)\fP is said to be an exponential time algorithm\&.
.PP
\fBNote:\fP
.RS 4
Worst-case time-complexity \fCT(n)\fP indicates the longest running time performed by an algorithm given any input of size \fCn\fP, and thus this guarantees that the algorithm finishes on time\&.
.RE
.PP
.SS "Big O notation"
Big O notation describes the limiting behavior of a function when the argument tends towards a particular value or infinity, usually in terms of simpler functions and it is used to classify algorithms by how they respond (e\&.g\&., in their processing time or working space requirements) to changes in input size\&.
.SH "Constant time"
.PP
An algorithm is said to be constant time (also written as \fCO(1)\fP time) if the value of \fCT(n)\fP is bounded by a value that does not depend on the size of the input\&.
.PP
Despite the name \fIconstant time\fP, the running time does not have to be independent of the problem size, but an upper bound for the running time has to be bounded independently of the problem size\&.
.PP
\fBNote:\fP
.RS 4
Constant time effectively means that there is a constant upper bound to how long the function will take to run which isn’t affected by any of the input argument\&.
.RE
.PP
.SS "eSolid - RT Kernel time complexity"
All eSolid - RT Kernel functions are using \fCconstant time O(1)\fP algorithms\&. This is especially important for Real Time applications\&. 
