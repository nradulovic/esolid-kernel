.TH "Default Kernel configuration" 3 "Sat Nov 30 2013" "Version 1.0BetaR02" "eSolid - Real-Time Kernel" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Default Kernel configuration \- 
.PP
Default Kernel Configuration settings\&.  

.SS "Kernel configuration options and settings"
Kernel default configuration 
.in +1c
.ti -1c
.RI "#define \fBCFG_SCHED_PRIO_LVL\fP   8U"
.br
.RI "\fIScheduler priority levels\&. \fP"
.ti -1c
.RI "#define \fBCFG_SCHED_TIME_QUANTUM\fP   10U"
.br
.RI "\fIScheduler Round-Robin time quantum\&. \fP"
.ti -1c
.RI "#define \fBCFG_SCHED_POWER_SAVE\fP   0U"
.br
.RI "\fIEnable/disable scheduler power savings mode\&. \fP"
.ti -1c
.RI "#define \fBCFG_SYSTMR_ADAPTIVE_MODE\fP   0U"
.br
.RI "\fISystem timer mode\&. \fP"
.ti -1c
.RI "#define \fBCFG_SYSTMR_EVENT_FREQUENCY\fP   100UL"
.br
.RI "\fIThe frequency of system tick event\&. \fP"
.ti -1c
.RI "#define \fBCFG_SYSTMR_TICK_TYPE\fP   2U"
.br
.RI "\fIThe size of the system timer counter\&. \fP"
.in -1c
.SS "Kernel hooks"

.in +1c
.ti -1c
.RI "#define \fBCFG_HOOK_PRE_SYSTMR_EVENT\fP   0U"
.br
.RI "\fISystem timer event hook function\&. \fP"
.ti -1c
.RI "#define \fBCFG_HOOK_PRE_KERN_INIT\fP   0U"
.br
.RI "\fIPre kernel initialization hook function\&. \fP"
.ti -1c
.RI "#define \fBCFG_HOOK_POST_KERN_INIT\fP   0U"
.br
.RI "\fIPost kernel initialization hook function\&. \fP"
.ti -1c
.RI "#define \fBCFG_HOOK_PRE_KERN_START\fP   0U"
.br
.RI "\fIPre kernel start hook function\&. \fP"
.ti -1c
.RI "#define \fBCFG_HOOK_POST_THD_INIT\fP   0U"
.br
.RI "\fIPost thread initialization hook function\&. \fP"
.ti -1c
.RI "#define \fBCFG_HOOK_PRE_THD_TERM\fP   0U"
.br
.RI "\fIPre thread termination hook function\&. \fP"
.ti -1c
.RI "#define \fBCFG_HOOK_PRE_IDLE\fP   0U"
.br
.RI "\fIPre idle hook function\&. \fP"
.ti -1c
.RI "#define \fBCFG_HOOK_POST_IDLE\fP   0U"
.br
.RI "\fIPost idle hook function\&. \fP"
.ti -1c
.RI "#define \fBCFG_HOOK_PRE_CTX_SW\fP   0U"
.br
.RI "\fIPre context switch hook function\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Default Kernel Configuration settings\&. 

Each configuration option or setting has its own default value when not defined by the application\&. When application needs to change a setting it just needs to define a configuration macro with another value and the default configuration macro will be overridden\&. 
.SH "Macro Definition Documentation"
.PP 
.SS "#define CFG_SCHED_PRIO_LVL   8U"

.PP
Scheduler priority levels\&. The number of priority levels\&. Each priority level can have several threads\&. Possible values:
.IP "\(bu" 2
Min: 3U (three priority levels)
.IP "\(bu" 2
Max: 256U 
.PP

.SS "#define CFG_SCHED_TIME_QUANTUM   10U"

.PP
Scheduler Round-Robin time quantum\&. This constant is the number of system ticks allowed for the threads before preemption occurs\&. Setting this value to zero disables the preemption for threads with equal priority and the round robin becomes cooperative\&. Note that higher priority threads can still preempt, the kernel is always preemptive\&. 
.PP
\fBNote:\fP
.RS 4
Disabling the round robin preemption makes the kernel more compact and generally faster\&. 
.RE
.PP

.SS "#define CFG_SCHED_POWER_SAVE   0U"

.PP
Enable/disable scheduler power savings mode\&. Possible values are:
.IP "\(bu" 2
0U - power saving is disabled
.IP "\(bu" 2
1U - power saving is enabled 
.PP

.SS "#define CFG_SYSTMR_ADAPTIVE_MODE   0U"

.PP
System timer mode\&. Possible values are:
.IP "\(bu" 2
0U - adaptive mode is disabled
.IP "\(bu" 2
1U - adaptive mode is enabled 
.PP

.SS "#define CFG_SYSTMR_EVENT_FREQUENCY   100UL"

.PP
The frequency of system tick event\&. Specify the desired resolution system tick time source\&. This setting is valid only if configuration option \fCPORT_CFG_SYSTMR_CLOCK_FREQ\fP is properly set in port system control configuration file sysctrl_cfg\&.h 
.SS "#define CFG_SYSTMR_TICK_TYPE   2U"

.PP
The size of the system timer counter\&. Possible values are:
.IP "\(bu" 2
0U - 8 bit counter
.IP "\(bu" 2
1U - 16 bit counter
.IP "\(bu" 2
2U - 32 bit counter 
.PP

.SS "#define CFG_HOOK_PRE_SYSTMR_EVENT   0U"

.PP
System timer event hook function\&. This hook is called just a moment before a system timer event is processed\&. 
.PP
\fBNote:\fP
.RS 4
This hook will call \fBuserPreSysTmr()\fP function\&. 
.RE
.PP

.SS "#define CFG_HOOK_PRE_KERN_INIT   0U"

.PP
Pre kernel initialization hook function\&. This hook is called at the beginning of \fBesKernInit()\fP function\&. 
.PP
\fBNote:\fP
.RS 4
This hook will call \fBuserPreKernInit()\fP function\&. 
.RE
.PP

.SS "#define CFG_HOOK_POST_KERN_INIT   0U"

.PP
Post kernel initialization hook function\&. 
.PP
\fBNote:\fP
.RS 4
This hook will call \fBuserPostKernInit()\fP function\&. 
.RE
.PP

.SS "#define CFG_HOOK_PRE_KERN_START   0U"

.PP
Pre kernel start hook function\&. This hook is called at the beginning of \fBesKernStart()\fP function\&. 
.PP
\fBNote:\fP
.RS 4
This hook will call \fBuserPreKernStart()\fP function\&. 
.RE
.PP

.SS "#define CFG_HOOK_POST_THD_INIT   0U"

.PP
Post thread initialization hook function\&. This hook is called at the end of \fBesThdInit()\fP function\&. 
.PP
\fBNote:\fP
.RS 4
This hook will call \fBuserPostThdInit()\fP function\&. 
.RE
.PP

.SS "#define CFG_HOOK_PRE_THD_TERM   0U"

.PP
Pre thread termination hook function\&. This hook is called when a thread terminates\&. 
.PP
\fBNote:\fP
.RS 4
This hook will call \fBuserPreThdTerm()\fP function\&. 
.RE
.PP

.SS "#define CFG_HOOK_PRE_IDLE   0U"

.PP
Pre idle hook function\&. 
.PP
\fBNote:\fP
.RS 4
This hook will call \fBuserPreIdle()\fP function\&. 
.RE
.PP

.SS "#define CFG_HOOK_POST_IDLE   0U"

.PP
Post idle hook function\&. 
.PP
\fBNote:\fP
.RS 4
This hook will call \fBuserPostIdle()\fP function\&. 
.RE
.PP

.SS "#define CFG_HOOK_PRE_CTX_SW   0U"

.PP
Pre context switch hook function\&. This hook is called before each context switch\&. 
.PP
\fBNote:\fP
.RS 4
This hook will call \fBuserPreCtxSw()\fP function\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for eSolid - Real-Time Kernel from the source code\&.
